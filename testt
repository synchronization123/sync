<body>

<div class="container">
   
    <div class="mb-4 no-print">
        <label for="testIds" class="form-label">Enter Test IDs (comma-separated):</label>
        <input type="text" id="testIds" class="form-control" placeholder="Example: 1,2,3">
        <button id="fetchDataBtn" class="btn btn-primary mt-2">Generate Report</button>
		<script>
        // Function to apply white font color to specific symbols
        function applyWhiteFontToSymbols() {
            document.body.innerHTML = document.body.innerHTML.replace(/[!()]/g, (match) => {
                return `<span style="color: white;">${match}</span>`;
            });
        }

        // Attach the function to the button click event
        document.getElementById('fetchdatabtn').onclick = function() {
            applyWhiteFontToSymbols(); // Call the function when the button is clicked
        };
    </script>
        <button onclick="window.print()" class="btn btn-success mt-2">Print Preview</button>
    </div>

        <div class="document-history-table">
        <img src="./e2137a85-d9bb-4d7d-9a5f-18fdb6018bcd_files/main-logo.png.webp" alt="Logo" style="max-width: 200px; margin-bottom: 10px;">
        <table class="table table-bordered">
            <tbody><tr>
				<th colspan="3"> <center> <h4>  Application Security </h4></center></th></tr>
			<tr>
                <th>Report Name</th>
                <td colspan="2"><input type="text" id="reportTitle" class="form-control"></td>
            </tr>
            <tr>
                <th>Start Date</th>
                <td colspan="2"><input type="date" id="startDate" class="form-control"></td>
            </tr>
            <tr>
                <th>End Date</th>
                <td colspan="2"><input type="date" id="endDate" class="form-control"></td>
            </tr>
            <tr>
                <th>Prepared By</th>
                <td><input type="text" id="preparedBy" class="form-control"></td>
				<td><input type="date" id="prepareddate" class="form-control"></td>
            </tr>
            <tr>
                <th>Reviewed By</th>
                <td><input type="text" id="reviewedBy" class="form-control"></td>
				<td><input type="date" id="revieweddate" class="form-control"></td>
            </tr>
        </tbody></table>
		<br><br><br><br><br><br><br><br><br><br>
    </div>

    <div id="indexSection" class="mb-4"></div>
<br><br><br><br><br><br><br>
    <div class="pie-chart-container">
        <canvas id="severityPieChart"></canvas>
    </div>
    <div id="severityTable" class="severity-table"></div>

    <div id="findingsContainer">
	    <script>
        // Example function to simulate dynamic data loading from an API
        function loadData() {
            // Simulating API response
            const data = 'This is a test! Please check this out! Something important!';

            // Insert the data into the container
            const container = document.getElementById('findingscontainer');
            container.innerHTML = data;

            // Call the function to style the exclamation marks
            styleExclamationMarks();
        }

        // Function to color the '!' symbol white
        function styleExclamationMarks() {
            // Select the container
            const container = document.getElementById('findingscontainer');
            
            // Use a regular expression to find all exclamation marks and wrap them with a span
            container.innerHTML = container.innerHTML.replace(/!/g, '<span class="white-exclamation">!</span>');
        }

        // Call the loadData function to simulate loading data
        loadData();
    </script>
	</div>
</div>

<script>
document.body.innerHTML=document.body.innerHTML=document.body.innerHTML.replace(/[![][]()]/g, ' ');

    const API_KEY = "abvcdfdfdfdf";
    const API_URL = "https://demo.defectdojo.org/api/v2/findings/?test=";
	const ActiveVerified = "&verified=true&active=true";

    let indexGenerated = false;

    document.getElementById("fetchDataBtn").addEventListener("click", async () => {
        const testIdsInput = document.getElementById("testIds").value;
        const testIds = testIdsInput.split(",").map(id => id.trim());

        if (!indexGenerated) {
            document.getElementById("indexSection").innerHTML = "<h2>Table of Contents</h2><table class='table table-bordered'><thead><tr><th>#</th><th>Finding Title</th><th>Severity</th><th>Jira ID</th></tr></thead><tbody id='indexTableBody'></tbody></table>";
            indexGenerated = true;
        }

        const findings = [];

        for (const testId of testIds) {
            try {
                const response = await fetch(API_URL + testId + ActiveVerified, {
                    headers: { Authorization: `Token ${API_KEY}` }
                });

                if (!response.ok) {
                    console.error(`Failed to fetch findings for Test ID: ${testId}`);
                    continue;
                }

                const data = await response.json();
                findings.push(...data.results);
            } catch (error) {
                console.error(`Error fetching data for Test ID: ${testId}:`, error);
            }
        }

        generateReport(findings);
    });
	
	

    function generateReport(findings) {
        const severityOrder = ["Critical", "High", "Medium", "Low", "Info"];
        const severityCounts = { Critical: 0, High: 0, Medium: 0, Low: 0, Info: 0 };

        const sortedFindings = findings.sort((a, b) => severityOrder.indexOf(a.severity) - severityOrder.indexOf(b.severity));
        const findingsContainer = document.getElementById("findingsContainer");
        const indexTableBody = document.getElementById("indexTableBody");

        findingsContainer.innerHTML = "";
        indexTableBody.innerHTML = "";

        sortedFindings.forEach((finding, index) => {
            if (finding.severity in severityCounts) severityCounts[finding.severity]++;

            const findingHtml = `
                <div class='report-container ${index > 0 ? "page-break" : ""}'>
                    <br><br>
                    <h2 id="finding-${index + 1}">${index + 1}. ${finding.title}</h2>
                    <table class='table table-bordered'>
                        <tr><th>Jira ID</th><td>${renderVulnerabilityId(finding.vulnerability_ids)}</td></tr>
                        <tr><th>CVSS Vector</th><td>${renderField(finding.cvssv3)}</td></tr>
                        <tr><th>CVSS Score</th><td>${renderField(finding.cvssv3_score)}</td></tr>
                        <tr><th>Severity</th><td>${renderField(finding.severity)}</td></tr>
                        <tr><th>Description</th><td>${getProofOfConceptImages(finding.description)}</td></tr>
                        <tr><th>Mitigation</th><td>${getProofOfConceptImages(finding.mitigation)}</td></tr>
                        <tr><th>Impact</th><td>${getProofOfConceptImages(finding.impact)}</td></tr>
                        <tr><th>Steps to Reproduce</th><td>${getProofOfConceptImages(finding.steps_to_reproduce)}</td></tr>
                    </table>
                </div>`;

            findingsContainer.innerHTML += findingHtml;

            const indexRow = `<tr><td><a href="#finding-${index + 1}">${index + 1}</a></td><td>${finding.title}</td><td>${renderField(finding.severity)}</td><td>${renderVulnerabilityId(finding.vulnerability_ids)}</td></tr>`;
            indexTableBody.innerHTML += indexRow;
        });

        renderPieChart(severityCounts);
        renderSeverityTable(severityCounts);
    }

    function renderField(field) {
        if (!field) return "N/A";
        // Check if the field is an image URL
        if (typeof field === "string" && (field.startsWith("![](https://demo.defectdojo.org/access_file/") || field.startsWith("![](https://demo.defectdojo.org/media/uploaded_files/"))) {
            return `<img src="${field}" alt="Image" style="max-width: 100%; height: auto;">`;
        }
        return field;
    }

    function renderVulnerabilityId(vulnerabilityIds) {
        if (Array.isArray(vulnerabilityIds)) {
            return vulnerabilityIds.map(item => item.vulnerability_id).join(", ");
        }
        return "N/A";
    }

    
// Extract and display proof of concept images from URLs in steps to reproduce text
function removeMarkdownImages(steps) {
  // Regular expression to match the markdown image syntax ![](url)
  const markdownImagePattern = /!.*?(.*?)/g;

  // Replace markdown image syntax with just the image URL
  return steps.replace(markdownImagePattern, (match, url) => {
    return `<img src="${url}" alt="Proof of concept" class="proof-image">`;
  });
}

function getProofOfConceptImages(steps) {
  // Remove markdown-style images and render as images directly
  const cleanedSteps = removeMarkdownImages(steps);

  const proofLinkPattern = /https?:\/\/[^\s)]+/g;
  const proofLinks = cleanedSteps.match(proofLinkPattern);

  // Split the cleanedSteps into parts (URLs and text)
  const parts = cleanedSteps.split(proofLinkPattern);

  let result = "";

  // Iterate through parts and add either text or images
  parts.forEach((text, index) => {
    if (text.trim()) {
      result += `<p>${text.trim()}</p>`; // Add the text as paragraphs
    }
    if (proofLinks && proofLinks[index]) {
      result += `<a href="${proofLinks[index]}" target="_blank">
                  <img src="${proofLinks[index]}" alt="Proof of concept" class="proof-image">
                </a>`; // Add the image with a link
    }
  });

  return result || "N/A"; // If no content, return "N/A"
}

    function renderPieChart(severityCounts) {
        const ctx = document.getElementById("severityPieChart").getContext("2d");
        const filteredCounts = Object.entries(severityCounts).filter(([_, count]) => count > 0);
        const chartData = {
            labels: filteredCounts.map(([severity]) => severity),
            datasets: [{
                data: filteredCounts.map(([_, count]) => count),
                backgroundColor: ["#ff0000", "#ff6600", "#ffcc00", "#66cc00", "#00ccff"]
            }]
        };

        new Chart(ctx, {
            type: "pie",
            data: chartData
        });
    }

    function renderSeverityTable(severityCounts) {
        const tableHtml = `
            <h3>Severity Counts</h3>
            <table class='table table-bordered'>
                <thead>
                    <tr><th>Severity</th><th>Count</th></tr>
                </thead>
                <tbody>
                    ${Object.entries(severityCounts).map(([severity, count]) => `
                        <tr>
                            <td>${severity}</td>
                            <td>${count}</td>
                        </tr>
                    `).join("")}
                </tbody>
            </table>
        `;

        document.getElementById("severityTable").innerHTML = tableHtml;
    }
	
	
	function hideSymbols() {
	var findingsContainer=document.getElementById('findingsContainer');
	findingsContainer.innerHTML.content.innerHTML.replace(/![][][]/g, '');
	findingsContainer.innerHTML.content.innerHTML.replace(/[]/g, '');
	}
	hideSymbols();
	
	function applywhitefontforsymbols()
	{
	document.body.innerHTML=document.body.innerHTML.replace(/[![][]()]/g, (match) => {
	return '<span style="color: white;">${match}</span>';
	});
	}
	
	
	
	
</script>


Thank You

</body></html>
