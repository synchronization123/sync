<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>DefectDojo Report Generator</title>
</head>
<body>
  <div style="padding: 20px; font-family: Arial, sans-serif;">
    <h2>DefectDojo Report Generator</h2>
    <form id="reportForm">
      <label for="testIds">Test IDs (comma-separated):</label><br>
      <input type="text" id="testIds" style="width: 100%; padding: 5px; margin-bottom: 10px;" required><br>
      
      <label for="reportName">Report Name:</label><br>
      <input type="text" id="reportName" style="width: 100%; padding: 5px; margin-bottom: 10px;" required><br>
      
      <label for="startDate">Start Date:</label><br>
      <input type="text" id="startDate" style="width: 100%; padding: 5px; margin-bottom: 10px;" required><br>
      
      <label for="endDate">End Date:</label><br>
      <input type="text" id="endDate" style="width: 100%; padding: 5px; margin-bottom: 10px;" required><br>
      
      <label for="preparedBy">Prepared By:</label><br>
      <input type="text" id="preparedBy" style="width: 100%; padding: 5px; margin-bottom: 10px;" required><br>
      
      <label for="reviewedBy">Reviewed By:</label><br>
      <input type="text" id="reviewedBy" style="width: 100%; padding: 5px; margin-bottom: 10px;" required><br>
      
      <label for="approvedBy">Approved By:</label><br>
      <input type="text" id="approvedBy" style="width: 100%; padding: 5px; margin-bottom: 10px;" required><br>
      
      <button type="submit" style="padding: 10px 20px; background-color: #20a6d8; color: white; border: none; cursor: pointer;">Generate Report</button>
    </form>
    <div id="status" style="margin-top: 20px;"></div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/pygal@3.0.0/dist/pygal.min.js"></script>
  <script>
    const API_URL = "https://demo.defectdojo.org/api/v2/tests/{}/generate_report/";
    const API_KEY = "abc"; // Replace with your actual API key

    function getSeverityColor(severity) {
      if (severity === "Critical") return "maroon";
      if (severity === "High") return "red";
      if (severity === "Medium") return "orange";
      if (severity === "Low") return "yellow";
      if (severity === "Info") return "grey";
      return "transparent";
    }

    function stripVulnerabilityId(vulnerabilityId) {
      if (!vulnerabilityId || typeof vulnerabilityId !== "object") return "N/A";
      return vulnerabilityId.vulnerability_id ? vulnerabilityId.vulnerability_id.replace(/^{'vulnerability_id': '|'}$/g, "") : "N/A";
    }

    function generateHtmlReport(findingData, reportName, startDate, endDate, preparedBy, reviewedBy, approvedBy) {
      const sortedFindings = findingData.sort((a, b) => {
        const severityOrder = ["Critical", "High", "Medium", "Low", "Info"];
        return severityOrder.indexOf(a.severity) - severityOrder.indexOf(b.severity);
      });

      // Count severity occurrences
      const severityCounts = { Critical: 0, High: 0, Medium: 0, Low: 0, Info: 0 };
      sortedFindings.forEach(finding => {
        severityCounts[finding.severity]++;
      });

      // Generate pie chart using Pygal
      const pieChart = pygal.Pie({
        width: 400,
        height: 200,
        print_values: true,
        value_formatter: x => `(${((x * 100) / Object.values(severityCounts).reduce((a, b) => a + b, 0)).toFixed(2)}%)`,
        style: { value_font_size: 4 }
      });
      pieChart.title = "Findings by Severity";
      Object.entries(severityCounts).forEach(([severity, count]) => {
        pieChart.add(`${severity}, (${count})`, count);
      });
      const chartSvg = pieChart.render().replace(/\n/g, " ");

      // Start HTML report
      let htmlReport = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>DefectDojo Findings Report</title>
          <style>
            body { border: 1px solid #ccc; padding: 10px; font-size: 16px; font-family: Arial, sans-serif; }
            h1 { font-size: 18px; font-weight: bold; }
            .report-heading { font-size: 34px; font-weight: bold; }
            .finding-title { background-color: rgba(32, 166, 216, 0.75); color: white; padding: 10px; margin-top: 20px; }
            .severity-box { display: inline-block; padding: 5px; margin-bottom: 10px; color: white; }
            .severity-critical { background-color: maroon; }
            .severity-high { background-color: red; }
            .severity-medium { background-color: orange; }
            .severity-low { background-color: yellow; }
            .severity-info { background-color: grey; }
            .hardcoded-line { border-top: 1px solid #000; margin-top: 1px; padding-top: 1px; border-width: 1px; }
            .step-image { border: 1px solid #ccc; padding: 5px; margin-bottom: 10px; max-width: 1000px; max-height: 800px; }
            .steps_to_reproduce { list-style-type: none; padding-left: 0; }
            table { border-collapse: collapse; width: 100%; }
            th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
            .Sub-Title { font-size: 24px; }
          </style>
        </head>
        <body>
          <div class="cover-page">
            <img src="logo" alt="Logo">
            <h2 class="report-heading">${reportName}</h2>
            <h1>Application Security</h1>
            <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
            <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
            <div class="Sub-Title">
              <p><strong>Report Properties:</strong></p>
              <p><strong>VAPT Dates:</strong></p>
            </div>
            <table>
              <tr><th>Start Date:</th><td>${startDate}</td></tr>
              <tr><th>End Date:</th><td>${endDate}</td></tr>
              <tr><th>Report Prepared by:</th><td>${preparedBy}</td></tr>
              <tr><th>Reviewed by:</th><td>${reviewedBy}</td></tr>
              <tr><th>Approved by:</th><td>${approvedBy}</td></tr>
            </table>
          </div>
          <br><br><br><br><br>
          <div>${chartSvg}</div>
      `;

      // Group findings by severity
      const severityFindings = {};
      const severityColors = {
        Critical: { background: "maroon", font: "black" },
        High: { background: "red", font: "black" },
        Medium: { background: "orange", font: "black" },
        Low: { background: "yellow", font: "black" },
        Info: { background: "grey", font: "black" }
      };

      sortedFindings.forEach(finding => {
        const severity = finding.severity;
        if (!severityFindings[severity]) severityFindings[severity] = [];
        severityFindings[severity].push(finding);
      });

      // Findings index
      htmlReport += `<h2 id="top">Findings Index</h2>`;
      const severityOrder = ["Critical", "High", "Medium", "Low", "Info"];
      severityOrder.forEach(severity => {
        const findings = severityFindings[severity] || [];
        if (findings.length > 0) {
          const color = severityColors[severity] || { background: "white", font: "black" };
          htmlReport += `
            <h1 style="background-color: ${color.background}; color: ${color.font}">${severity} Findings:</h1>
            <ul>
          `;
          findings.forEach((finding, index) => {
            const globalIndex = sortedFindings.indexOf(finding) + 1;
            htmlReport += `<li><a href="#finding${globalIndex}">Finding ${globalIndex}: ${finding.title}</a></li>`;
          });
          htmlReport += `</ul>`;
        }
      });

      htmlReport += `<br><br><br><p><h2 id="top">Findings Details</h2></p>`;

      // Findings details
      sortedFindings.forEach((finding, index) => {
        const findingTitle = finding.title;
        const vulnerabilityId = finding.vulnerability_ids[0] ? stripVulnerabilityId(finding.vulnerability_ids[0]) : "N/A";
        const description = finding.description.replace(/\r\n/g, "<br>");
        const cvssv3 = finding.cvssv3 || "N/A";
        const cvssv3Score = finding.cvssv3_score || "N/A";
        const severity = finding.severity;
        const stepsToReproduce = finding.steps_to_reproduce.replace(/\r\n/g, "<br>");
        const mitigation = finding.mitigation.replace(/\r\n/g, "<br>");
        const impact = finding.impact.replace(/\r\n/g, "<br>");

        htmlReport += `
          <br><br><br>
          <div id="finding${index + 1}" class="finding-border">
            <div class="finding-title">
              <h1>Finding ${index + 1}: ${findingTitle}</h1>
            </div>
          </div>
          <p><strong>Jira ID:</strong> ${vulnerabilityId}</p>
          <hr class="hardcoded-line">
          <p><strong>Description:</strong> ${description}</p>
          <hr class="hardcoded-line">
          <p><strong>CVSSv3:</strong> ${cvssv3}</p>
          <hr class="hardcoded-line">
          <p><strong>CVSSv3 Score:</strong> ${cvssv3Score}</p>
          <hr class="hardcoded-line">
          <div class="severity-box severity-${severity.toLowerCase()}" style="background-color: ${getSeverityColor(severity)};">
            <strong>Severity:</strong> ${severity}
          </div>
          <hr class="hardcoded-line">
          <p><strong>Impact:</strong> ${impact}</p>
          <hr class="hardcoded-line">
          <p><strong>Mitigation:</strong> ${mitigation}</p>
          <hr class="hardcoded-line">
          <p><strong>Steps to Reproduce:</strong></p>
          <ul class="steps_to_reproduce">
        `;

        // Parse steps to reproduce and handle images
        const steps = stepsToReproduce.split("<br>");
        steps.forEach(step => {
          const imgRegex = /!\[\]\((https?:\/\/[^\s]+)\)/g;
          let match;
          let modifiedStep = step;
          while ((match = imgRegex.exec(step)) !== null) {
            const imgUrl = match[1];
            modifiedStep = modifiedStep.replace(`![](${imgUrl})`, `<img class="step-image" src="${imgUrl}" style="max-width: 1000px; max-height: 800px;"><br>`);
          }
          htmlReport += `<li>${modifiedStep}</li>`;
        });

        htmlReport += `</ul><hr></div>`;
      });

      htmlReport += `</body></html>`;
      return htmlReport;
    }

    // Handle form submission
    document.getElementById("reportForm").addEventListener("submit", async (e) => {
      e.preventDefault();
      const statusDiv = document.getElementById("status");
      statusDiv.innerHTML = "Generating report...";

      const testIds = document.getElementById("testIds").value.split(",").map(id => id.trim());
      const reportName = document.getElementById("reportName").value;
      const startDate = document.getElementById("startDate").value;
      const endDate = document.getElementById("endDate").value;
      const preparedBy = document.getElementById("preparedBy").value;
      const reviewedBy = document.getElementById("reviewedBy").value;
      const approvedBy = document.getElementById("approvedBy").value;

      const findingData = [];

      for (const testId of testIds) {
        try {
          const response = await fetch(API_URL.replace("{}", testId), {
            method: "POST",
            headers: {
              "Authorization": `Token ${API_KEY}`,
              "Content-Type": "application/json"
            }
          });

          if (response.ok) {
            const reportData = await response.json();
            const findings = reportData.findings || [];
            if (findings.length > 0) {
              findingData.push(...findings);
              statusDiv.innerHTML += `<p>Findings fetched for Test ID: ${testId}</p>`;
            } else {
              statusDiv.innerHTML += `<p>No findings found for Test ID: ${testId}</p>`;
            }
          } else {
            statusDiv.innerHTML += `<p>Error fetching findings for Test ID: ${testId}. Status code: ${response.status}</p>`;
          }
        } catch (error) {
          statusDiv.innerHTML += `<p>Error fetching findings for Test ID: ${testId}. Error: ${error.message}</p>`;
        }
      }

      if (findingData.length > 0) {
        const htmlReport = generateHtmlReport(findingData, reportName, startDate, endDate, preparedBy, reviewedBy, approvedBy);
        const blob = new Blob([htmlReport], { type: "text/html" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = "report.html";
        a.click();
        URL.revokeObjectURL(url);
        statusDiv.innerHTML += `<p>HTML report generated and downloaded as report.html</p>`;
      } else {
        statusDiv.innerHTML += `<p>No findings to generate report.</p>`;
      }
    });
  </script>
</body>
</html>