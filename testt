<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>DefectDojo Report Generator</title>
  <!-- Bootstrap CSS for styling -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Chart.js for pie chart -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.6/dist/chart.umd.min.js"></script>
  <style>
    .report-container { margin-bottom: 20px; }
    .page-break { page-break-before: always; }
    .proof-image { max-width: 1000px; max-height: 800px; width: auto; height: auto; display: block; margin: 10px 0; }
    .image-error { color: red; font-style: italic; display: none; }
    .no-print { display: block; }
    @media print {
      .no-print { display: none; }
      .page-break { page-break-before: always; }
    }
    .document-history-table { margin-bottom: 20px; }
    .pie-chart-container { width: 400px; height: 200px; margin: 20px 0; }
    .severity-table { margin-bottom: 20px; }
  </style>
</head>
<body>
  <div class="container">
    <div class="mb-4 no-print">
      <label for="testIds" class="form-label">Enter Test IDs (comma-separated):</label>
      <input type="text" id="testIds" class="form-control" placeholder="Example: 1,2,3" required>
      <button id="fetchDataBtn" class="btn btn-primary mt-2">Generate Report</button>
      <button onclick="window.print()" class="btn btn-success mt-2">Print Preview</button>
    </div>

    <div class="document-history-table">
      <img src="./e2137a85-d9bb-4d7d-9a5f-18fdb6018bcd_files/main-logo.png.webp" alt="Logo" style="max-width: 200px; margin-bottom: 10px;" onerror="this.style.display='none';">
      <table class="table table-bordered">
        <tbody>
          <tr><th colspan="3"><center><h4>Application Security</h4></center></th></tr>
          <tr>
            <th>Report Name</th>
            <td colspan="2"><input type="text" id="reportTitle" class="form-control"></td>
          </tr>
          <tr>
            <th>Start Date</th>
            <td colspan="2"><input type="date" id="startDate" class="form-control"></td>
          </tr>
          <tr>
            <th>End Date</th>
            <td colspan="2"><input type="date" id="endDate" class="form-control"></td>
          </tr>
          <tr>
            <th>Prepared By</th>
            <td><input type="text" id="preparedBy" class="form-control"></td>
            <td><input type="date" id="prepareddate" class="form-control"></td>
          </tr>
          <tr>
            <th>Reviewed By</th>
            <td><input type="text" id="reviewedBy" class="form-control"></td>
            <td><input type="date" id="revieweddate" class="form-control"></td>
          </tr>
        </tbody>
      </table>
      <br><br><br><br><br><br><br><br><br><br>
    </div>

    <div id="indexSection" class="mb-4"></div>
    <br><br><br><br><br><br><br>
    <div class="pie-chart-container">
      <canvas id="severityPieChart"></canvas>
    </div>
    <div id="severityTable" class="severity-table"></div>

    <div id="findingsContainer"></div>
    <div id="status" class="mt-3"></div>
  </div>

  <script>
    const API_URL = "https://demo.defectdojo.org/api/v2/findings/?test=";
    const BASE_URL = "https://demo.defectdojo.org";
    const ActiveVerified = "&verified=true&active=true";

    let indexGenerated = false;

    function getSeverityColor(severity) {
      if (severity === "Critical") return "#ff0000";
      if (severity === "High") return "#ff6600";
      if (severity === "Medium") return "#ffcc00";
      if (severity === "Low") return "#66cc00";
      if (severity === "Info") return "#00ccff";
      return "#000000";
    }

    function renderVulnerabilityId(vulnerabilityIds) {
      if (Array.isArray(vulnerabilityIds) && vulnerabilityIds.length > 0) {
        return vulnerabilityIds.map(item => item.vulnerability_id || "N/A").join(", ");
      }
      return "N/A";
    }

    function removeMarkdownImages(text) {
      const markdownImagePattern = /!\[\]\(([^)]+)\)/g;
      return text.replace(markdownImagePattern, (match, url) => {
        let imgUrl = url;
        if (imgUrl.startsWith("/access_file/")) {
          imgUrl = `${BASE_URL}${imgUrl}`;
        }
        return `<img src="${imgUrl}" alt="Proof of concept" class="proof-image" onerror="this.style.display='none'; this.nextSibling.style.display='block';"><span class="image-error">Failed to load image: ${imgUrl}</span>`;
      });
    }

    function getProofOfConceptImages(steps) {
      if (!steps) return "N/A";
      const cleanedSteps = removeMarkdownImages(steps.replace(/\r\n/g, "<br>"));
      const proofLinkPattern = /https?:\/\/[^\s)]+/g;
      const proofLinks = cleanedSteps.match(proofLinkPattern) || [];

      const parts = cleanedSteps.split(proofLinkPattern);
      let result = "";

      parts.forEach((text, index) => {
        if (text.trim()) {
          result += `<p>${text.trim()}</p>`;
        }
        if (proofLinks[index]) {
          let imgUrl = proofLinks[index];
          if (imgUrl.startsWith("/access_file/")) {
            imgUrl = `${BASE_URL}${imgUrl}`;
          }
          result += `<a href="${imgUrl}" target="_blank"><img src="${imgUrl}" alt="Proof of concept" class="proof-image" onerror="this.style.display='none'; this.nextSibling.style.display='block';"><span class="image-error">Failed to load image: ${imgUrl}</span></a>`;
        }
      });

      return result || "N/A";
    }

    function renderField(field) {
      if (!field) return "N/A";
      return getProofOfConceptImages(field);
    }

    function renderPieChart(severityCounts) {
      const ctx = document.getElementById("severityPieChart").getContext("2d");
      const filteredCounts = Object.entries(severityCounts).filter(([_, count]) => count > 0);
      const chartData = {
        labels: filteredCounts.map(([severity]) => {
          const count = severityCounts[severity];
          const total = Object.values(severityCounts).reduce((a, b) => a + b, 0);
          const percentage = total > 0 ? ((count * 100) / total).toFixed(2) : 0;
          return `${severity} (${count}, ${percentage}%)`;
        }),
        datasets: [{
          data: filteredCounts.map(([_, count]) => count),
          backgroundColor: filteredCounts.map(([severity]) => getSeverityColor(severity)),
          borderColor: "#fff",
          borderWidth: 2
        }]
      };

      new Chart(ctx, {
        type: "pie",
        data: chartData,
        options: {
          plugins: {
            title: { display: true, text: "Findings by Severity", font: { size: 16 } },
            legend: { display: true, position: "bottom" }
          },
          responsive: false,
          maintainAspectRatio: false
        }
      });
    }

    function renderSeverityTable(severityCounts) {
      const tableHtml = `
        <h3>Severity Counts</h3>
        <table class='table table-bordered'>
          <thead><tr><th>Severity</th><th>Count</th></tr></thead>
          <tbody>
            ${Object.entries(severityCounts).map(([severity, count]) => `
              <tr><td>${severity}</td><td>${count}</td></tr>
            `).join("")}
          </tbody>
        </table>
      `;
      document.getElementById("severityTable").innerHTML = tableHtml;
    }

    function generateReport(findings) {
      const severityOrder = ["Critical", "High", "Medium", "Low", "Info"];
      const severityCounts = { Critical: 0, High: 0, Medium: 0, Low: 0, Info: 0 };
      const sortedFindings = findings.sort((a, b) => severityOrder.indexOf(a.severity) - severityOrder.indexOf(b.severity));
      const findingsContainer = document.getElementById("findingsContainer");
      const indexTableBody = document.getElementById("indexTableBody");
      const reportTitle = document.getElementById("reportTitle").value || "DefectDojo Report";
      const startDate = document.getElementById("startDate").value;
      const endDate = document.getElementById("endDate").value;
      const preparedBy = document.getElementById("preparedBy").value;
      const prepareddate = document.getElementById("prepareddate").value;
      const reviewedBy = document.getElementById("reviewedBy").value;
      const revieweddate = document.getElementById("revieweddate").value;

      findingsContainer.innerHTML = "";
      if (indexTableBody) indexTableBody.innerHTML = "";

      sortedFindings.forEach((finding, index) => {
        if (finding.severity in severityCounts) severityCounts[finding.severity]++;
        const findingHtml = `
          <div class='report-container ${index > 0 ? "page-break" : ""}'>
            <br><br>
            <h2 id="finding-${index + 1}">${index + 1}. ${finding.title}</h2>
            <table class='table table-bordered'>
              <tr><th>Jira ID</th><td>${renderVulnerabilityId(finding.vulnerability_ids)}</td></tr>
              <tr><th>CVSS Vector</th><td>${renderField(finding.cvssv3)}</td></tr>
              <tr><th>CVSS Score</th><td>${renderField(finding.cvssv3_score)}</td></tr>
              <tr><th>Severity</th><td>${finding.severity || "N/A"}</td></tr>
              <tr><th>Description</th><td>${getProofOfConceptImages(finding.description)}</td></tr>
              <tr><th>Mitigation</th><td>${getProofOfConceptImages(finding.mitigation)}</td></tr>
              <tr><th>Impact</th><td>${getProofOfConceptImages(finding.impact)}</td></tr>
              <tr><th>Steps to Reproduce</th><td>${getProofOfConceptImages(finding.steps_to_reproduce)}</td></tr>
            </table>
          </div>`;
        findingsContainer.innerHTML += findingHtml;

        const indexRow = `<tr><td><a href="#finding-${index + 1}">${index + 1}</a></td><td>${finding.title}</td><td>${finding.severity || "N/A"}</td><td>${renderVulnerabilityId(finding.vulnerability_ids)}</td></tr>`;
        if (indexTableBody) indexTableBody.innerHTML += indexRow;
      });

      renderPieChart(severityCounts);
      renderSeverityTable(severityCounts);

      // Generate downloadable HTML report
      const reportHtml = `
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>${reportTitle}</title>
          <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
          <style>
            .report-container { margin-bottom: 20px; }
            .page-break { page-break-before: always; }
            .proof-image { max-width: 1000px; max-height: 800px; width: auto; height: auto; display: block; margin: 10px 0; }
            .image-error { color: red; font-style: italic; }
            .document-history-table { margin-bottom: 20px; }
            .pie-chart-container { width: 400px; height: 200px; margin: 20px 0; }
            .severity-table { margin-bottom: 20px; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="document-history-table">
              <img src="./e2137a85-d9bb-4d7d-9a5f-18fdb6018bcd_files/main-logo.png.webp" alt="Logo" style="max-width: 200px; margin-bottom: 10px;" onerror="this.style.display='none';">
              <table class="table table-bordered">
                <tbody>
                  <tr><th colspan="3"><center><h4>Application Security</h4></center></th></tr>
                  <tr><th>Report Name</th><td colspan="2">${reportTitle}</td></tr>
                  <tr><th>Start Date</th><td colspan="2">${startDate || "N/A"}</td></tr>
                  <tr><th>End Date</th><td colspan="2">${endDate || "N/A"}</td></tr>
                  <tr><th>Prepared By</th><td>${preparedBy || "N/A"}</td><td>${prepareddate || "N/A"}</td></tr>
                  <tr><th>Reviewed By</th><td>${reviewedBy || "N/A"}</td><td>${revieweddate || "N/A"}</td></tr>
                </tbody>
              </table>
              <br><br><br><br><br><br><br><br><br><br>
            </div>
            ${document.getElementById("indexSection").outerHTML}
            ${document.querySelector(".pie-chart-container").outerHTML}
            ${document.getElementById("severityTable").outerHTML}
            ${findingsContainer.outerHTML}
          </div>
        </body>
        </html>`;

      // Option 1: Download report
      const blob = new Blob([reportHtml], { type: "text/html" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "report.html";
      a.click();
      URL.revokeObjectURL(url);

      // Option 2: Display in new tab (uncomment to use)
      // const newWindow = window.open("");
      // newWindow.document.write(reportHtml);
      // newWindow.document.close();
      // document.getElementById("status").innerHTML = `<p>HTML report opened in a new tab. Images should load within the authenticated session.</p>`;

      document.getElementById("status").innerHTML = `<p>HTML report generated and downloaded as report.html. View within an authenticated session (e.g., host on your server or open in a new tab) to ensure images load correctly.</p>`;
    }

    document.getElementById("fetchDataBtn").addEventListener("click", async () => {
      const testIdsInput = document.getElementById("testIds").value;
      const testIds = testIdsInput.split(",").map(id => id.trim());
      const statusDiv = document.getElementById("status");
      statusDiv.innerHTML = "Generating report...";

      if (!indexGenerated) {
        document.getElementById("indexSection").innerHTML = "<h2>Table of Contents</h2><table class='table table-bordered'><thead><tr><th>#</th><th>Finding Title</th><th>Severity</th><th>Jira ID</th></tr></thead><tbody id='indexTableBody'></tbody></table>";
        indexGenerated = true;
      }

      const findings = [];

      for (const testId of testIds) {
        try {
          const response = await fetch(API_URL + testId + ActiveVerified, {
            method: "GET",
            headers: { "Content-Type": "application/json" },
            credentials: "include" // Include session cookies
          });

          if (response.ok) {
            const data = await response.json();
            const results = data.results || [];
            if (results.length > 0) {
              findings.push(...results);
              statusDiv.innerHTML += `<p>Findings fetched for Test ID: ${testId}</p>`;
            } else {
              statusDiv.innerHTML += `<p>No findings found for Test ID: ${testId}</p>`;
            }
          } else {
            statusDiv.innerHTML += `<p>Error fetching findings for Test ID: ${testId}. Status code: ${response.status}</p>`;
          }
        } catch (error) {
          statusDiv.innerHTML += `<p>Error fetching findings for Test ID: ${testId}. Error: ${error.message}</p>`;
        }
      }

      if (findings.length > 0) {
        generateReport(findings);
      } else {
        statusDiv.innerHTML += `<p>No findings to generate report.</p>`;
      }
    });
  </script>
</body>
</html>