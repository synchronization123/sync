<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EHR Threat Modeling Utility</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Vis.js CSS -->
    <link href="https://unpkg.com/vis-network@9.1.2/dist/vis-network.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
        }
        textarea, button, .card, table {
            border-radius: 15px !important;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        textarea {
            resize: vertical;
            min-height: 150px;
        }
        #network {
            height: 400px;
            border: 1px solid #dee2e6;
            border-radius: 15px;
            background-color: #fff;
        }
        .table th, .table td {
            vertical-align: middle;
        }
        button {
            transition: all 0.3s ease;
        }
        button:hover {
            transform: translateY(-2px);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-center mb-4">EHR Threat Modeling Utility</h1>
        <div class="card p-4 mb-4">
            <h5>Enter EHR User Stories</h5>
            <textarea class="form-control mb-3" id="userStories" placeholder="Enter user stories, one per line, e.g., As a provider, I want to prescribe medications to manage patient care or As a nurse I need the ability to document clinical notes"></textarea>
            <button class="btn btn-primary" onclick="generateDiagram()">Generate Diagram & STRIDE Table</button>
        </div>
        <div class="card p-4 mb-4">
            <h5>EHR Threat Model Diagram</h5>
            <div id="network"></div>
        </div>
        <div class="card p-4">
            <h5>STRIDE Threat Analysis</h5>
            <table class="table table-bordered" id="strideTable">
                <thead class="table-light">
                    <tr>
                        <th>Action</th>
                        <th>Spoofing</th>
                        <th>Tampering</th>
                        <th>Repudiation</th>
                        <th>Information Disclosure</th>
                        <th>Denial of Service</th>
                        <th>Elevation of Privilege</th>
                    </tr>
                </thead>
                <tbody id="strideTableBody"></tbody>
            </table>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Vis.js -->
    <script src="https://unpkg.com/vis-network@9.1.2/dist/vis-network.min.js"></script>
    <script>
        function generateDiagram() {
            const userStories = document.getElementById('userStories').value.trim().split('\n');
            const nodes = [];
            const edges = [];
            const strideData = [];
            const nodeMap = new Map();

            // EHR-specific STRIDE threat definitions
            const strideThreats = {
                Spoofing: (action) => {
                    if (action.includes('authenticate') || action.includes('log in') || action.includes('access')) {
                        return 'Unauthorized access to patient records using stolen credentials';
                    }
                    return '';
                },
                Tampering: (action) => {
                    if (action.includes('document') || action.includes('prescribe') || action.includes('reconcile') || action.includes('submit') || action.includes('filter')) {
                        return 'Alteration of clinical data or claims, compromising patient safety or billing integrity';
                    }
                    return '';
                },
                Repudiation: (action) => {
                    if (action.includes('prescribe') || action.includes('submit') || action.includes('approve') || action.includes('document')) {
                        return 'Denial of performed actions, undermining auditability and accountability';
                    }
                    return '';
                },
                'Information Disclosure': (action) => {
                    if (action.includes('access') || action.includes('view') || action.includes('share') || action.includes('filter') || action.includes('audit')) {
                        return 'Exposure of Protected Health Information (PHI), violating HIPAA';
                    }
                    return '';
                },
                'Denial of Service': (action) => {
                    if (action.includes('access') || action.includes('schedule') || action.includes('authenticate') || action.includes('filter')) {
                        return 'Disruption of EHR availability, delaying patient care';
                    }
                    return '';
                },
                'Elevation of Privileges': (action) => {
                    if (action.includes('approve') || action.includes('configure') || action.includes('audit') || action.includes('filter')) {
                        return 'Unauthorized access to administrative functions, compromising system integrity';
                    }
                    return '';
                }
            };

            // Parse user stories
            userStories.forEach((story, index) => {
                let actor, action, purpose;

                // Format 1: "As a [actor], I (want to|need to|can) [action] to [purpose]"
                let match = story.match(/As a ([^,]+), I (?:want to|need to|can) ([^ ]+(?: [^ ]+)*) to (.+)/);
                if (match) {
                    actor = match[1].trim();
                    action = match[2].trim();
                    purpose = match[3].trim();
                } else {
                    // Format 2: "As an [actor] I need the ability to [action] [object/purpose]"
                    match = story.match(/As an ([^ ]+(?: [^ ]+)*) I need the ability to ([^ ]+(?: [^ ]+)*) (.+)/);
                    if (match) {
                        actor = match[1].trim();
                        action = match[2].trim();
                        purpose = match[3].trim();
                    }
                }

                if (actor && action && purpose) {
                    // Add actor node
                    if (!nodeMap.has(actor)) {
                        nodeMap.set(actor, nodes.length);
                        nodes.push({ id: nodes.length, label: actor, shape: 'box', color: '#a3e635' });
                    }

                    // Add action node
                    const actionId = nodes.length;
                    nodeMap.set(action, actionId);
                    nodes.push({ id: actionId, label: action, shape: 'ellipse', color: '#60a5fa' });

                    // Add system/purpose node
                    const systemId = nodes.length;
                    nodeMap.set(purpose, systemId);
                    nodes.push({ id: systemId, label: purpose, shape: 'diamond', color: '#f87171' });

                    // Add edges
                    edges.push({ from: nodeMap.get(actor), to: actionId });
                    edges.push({ from: actionId, to: systemId });

                    // Generate STRIDE threats
                    const threats = {};
                    for (const [threat, check] of Object.entries(strideThreats)) {
                        threats[threat] = check_encoding(action) || 'N/A';
                    }
                    strideData.push({ action, threats });
                }
            });

            // Render diagram
            const container = document.getElementById('network');
            const data = { nodes: new vis.DataSet(nodes), edges: new vis.DataSet(edges) };
            const options = {
                layout: { hierarchical: { direction: 'UD', sortMethod: 'directed' } },
                edges: { arrows: 'to', smooth: { type: 'cubicBezier' } },
                physics: false
            };
            new vis.Network(container, data, options);

            // Render STRIDE table
            const tableBody = document.getElementById('strideTableBody');
            tableBody.innerHTML = '';
            strideData.forEach(({ action, threats }) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${action}</td>
                    <td>${threats.Spoofing}</td>
                    <td>${threats.Tampering}</td>
                    <td>${threats.Repudiation}</td>
                    <td>${threats['Information Disclosure']}</td>
                    <td>${threats['Denial of Service']}</td>
                    <td>${threats['Elevation of Privileges']}</td>
                `;
                tableBody.appendChild(row);
            });
        }
    </script>
</body>
</html>