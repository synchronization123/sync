<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>DefectDojo Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/select2-bootstrap-5-theme/1.3.0/select2-bootstrap-5-theme.min.css" rel="stylesheet" />
  <style>
    body {
      background-color: #f5f5f5;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .container-fluid {
      padding: 20px;
    }
    .filter-section {
      background-color: #fff;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .filter-section .btn-link {
      color: #007bff;
      text-decoration: none;
    }
    .filter-section .btn-link:hover {
      color: #0056b3;
    }
    .table-container {
      background-color: #fff;
      border-radius: 8px;
      padding: 15px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .table th, .table td {
      vertical-align: middle;
    }
    .select2-container--bootstrap-5 .select2-selection {
      height: 38px;
      padding: 6px 12px;
    }
    .pagination-section {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 15px;
    }
    .toast-container {
      z-index: 1055;
    }
    .nav-tabs .nav-link {
      color: #007bff;
    }
    .nav-tabs .nav-link.active {
      color: #0056b3;
      background-color: #fff;
      border-bottom: 2px solid #007bff;
    }
    .modal-fullscreen .modal-content {
      border-radius: 0;
    }
    .modal-table-container {
      max-height: 60vh;
      overflow-y: auto;
    }
    .description-textarea {
      width: 100%;
      min-height: 100px;
      resize: vertical;
    }
    .date-picker, .select-field {
      width: 100%;
    }
    .modal-header.text-center .modal-title {
      flex-grow: 1;
      text-align: center;
    }
  </style>
</head>
<body>
  <div class="container-fluid">
    <!-- Tabs Navigation -->
    <ul class="nav nav-tabs mb-3" id="dashboardTabs" role="tablist">
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" data-bs-target="#dashboard" type="button" role="tab" aria-controls="dashboard" aria-selected="true">Dashboard</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="engagements-test-count-tab" data-bs-toggle="tab" data-bs-target="#engagements-test-count" type="button" role="tab" aria-controls="engagements-test-count" aria-selected="false">Engagements with Test Count</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="test-cases-tab" data-bs-toggle="tab" data-bs-target="#test-cases" type="button" role="tab" aria-controls="test-cases" aria-selected="false">Test Cases</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="changelogs-tab" data-bs-toggle="tab" data-bs-target="#changelogs" type="button" role="tab" aria-controls="changelogs" aria-selected="false">Changelogs</button>
      </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content" id="dashboardTabContent">
      <!-- Dashboard Tab (Placeholder) -->
      <div class="tab-pane fade show active" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
        <div class="table-container">
          <h5>Dashboard content to be implemented</h5>
        </div>
      </div>

      <!-- Engagements with Test Count Tab -->
      <div class="tab-pane fade" id="engagements-test-count" role="tabpanel" aria-labelledby="engagements-test-count-tab">
        <!-- Engagements-Test-Count Filter Section -->
        <div class="filter-section">
          <div class="d-flex justify-content-between align-items-center mb-2">
            <h5 class="mb-0">Filters</h5>
            <button class="btn btn-link" type="button" data-bs-toggle="collapse" data-bs-target="#engTestCountFilterCollapse" aria-expanded="true" aria-controls="engTestCountFilterCollapse">
              <i class="bi bi-chevron-down"></i> Toggle Filters
            </button>
          </div>
          <div class="collapse show" id="engTestCountFilterCollapse">
            <div class="row g-3">
              <div class="col-md-2">
                <label for="engTestCountFilterId" class="form-label">ID</label>
                <input type="text" class="form-control" id="engTestCountFilterId" placeholder="Enter ID">
              </div>
              <div class="col-md-2">
                <label for="engTestCountFilterCreated" class="form-label">Created</label>
                <input type="date" class="form-control" id="engTestCountFilterCreated">
              </div>
              <div class="col-md-2">
                <label for="engTestCountFilterName" class="form-label">Name</label>
                <input type="text" class="form-control" id="engTestCountFilterName" placeholder="Enter name">
              </div>
              <div class="col-md-2">
                <label for="engTestCountFilterTargetStart" class="form-label">Start Date</label>
                <input type="date" class="form-control" id="engTestCountFilterTargetStart">
              </div>
              <div class="col-md-2">
                <label for="engTestCountFilterTargetEnd" class="form-label">End Date</label>
                <input type="date" class="form-control" id="engTestCountFilterTargetEnd">
              </div>
              <div class="col-md-2">
                <label for="engTestCountFilterAssignedTo" class="form-label">Assigned To</label>
                <select class="form-select" id="engTestCountFilterAssignedTo">
                  <option value="">All</option>
                </select>
              </div>
              <div class="col-md-2">
                <label for="engTestCountFilterComponent" class="form-label">Component</label>
                <select class="form-select" id="engTestCountFilterComponent">
                  <option value="">All</option>
                </select>
              </div>
              <div class="col-md-2">
                <label for="engTestCountFilterStatus" class="form-label">Status</label>
                <select class="form-select" id="engTestCountFilterStatus">
                  <option value="">All</option>
                  <option value="Not Started">Not Started</option>
                  <option value="In Progress">In Progress</option>
                  <option value="On Hold">On Hold</option>
                  <option value="Completed">Completed</option>
                </select>
              </div>
              <div class="col-md-2">
                <label for="engTestCountFilterCertification" class="form-label">Certification</label>
                <select class="form-select" id="engTestCountFilterCertification">
                  <option value="">All</option>
                  <option value="Pending">Pending</option>
                  <option value="Certified">Certified</option>
                  <option value="Not Certified">Not Certified</option>
                  <option value="Certified with Exception">Certified with Exception</option>
                </select>
              </div>
              <div class="col-md-12 d-flex justify-content-end">
                <button class="btn btn-primary me-2" id="engTestCountApplyFilters">Apply Filters</button>
                <button class="btn btn-secondary" id="engTestCountResetFilters">Reset Filters</button>
              </div>
            </div>
          </div>
        </div>

        <!-- Engagements-Test-Count Table Section -->
        <div class="table-container">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <h5>Total Count: <span id="engTestCountTotalCount">0</span></h5>
          </div>
          <div class="table-responsive">
            <table class="table table-striped table-hover">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Created</th>
                  <th>Name</th>
                  <th>Start Date</th>
                  <th>End Date</th>
                  <th>Assigned To</th>
                  <th>Component</th>
                  <th>Status</th>
                  <th>Certification</th>
                  <th>Test Case Count</th>
                </tr>
              </thead>
              <tbody id="engTestCountTableBody"></tbody>
            </table>
          </div>
          <div class="pagination-section">
            <div id="engTestCountPaginationStatus">Page 1 of 1 (0 results)</div>
            <div>
              <button class="btn btn-outline-primary btn-sm me-1" id="engTestCountFirstPage">First</button>
              <button class="btn btn-outline-primary btn-sm me-1" id="engTestCountPrevPage">Previous</button>
              <button class="btn btn-outline-primary btn-sm me-1" id="engTestCountNextPage">Next</button>
              <button class="btn btn-outline-primary btn-sm" id="engTestCountLastPage">Last</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Test Cases Tab -->
      <div class="tab-pane fade" id="test-cases" role="tabpanel" aria-labelledby="test-cases-tab">
        <!-- Test Cases Filter Section -->
        <div class="filter-section">
          <div class="d-flex justify-content-between align-items-center mb-2">
            <h5 class="mb-0">Filters</h5>
            <button class="btn btn-link" type="button" data-bs-toggle="collapse" data-bs-target="#testCasesFilterCollapse" aria-expanded="true" aria-controls="testCasesFilterCollapse">
              <i class="bi bi-chevron-down"></i> Toggle Filters
            </button>
          </div>
          <div class="collapse show" id="testCasesFilterCollapse">
            <div class="row g-3">
              <div class="col-md-3">
                <label for="testFilterCreated" class="form-label">Created</label>
                <input type="date" class="form-control" id="testFilterCreated">
              </div>
              <div class="col-md-3">
                <label for="testFilterTitle" class="form-label">Title</label>
                <input type="text" class="form-control" id="testFilterTitle" placeholder="Enter title">
              </div>
              <div class="col-md-3">
                <label for="testFilterCategory" class="form-label">Category</label>
                <select class="form-select" id="testFilterCategory">
                  <option value="">All</option>
                </select>
              </div>
              <div class="col-md-3">
                <label for="testFilterModality" class="form-label">Modality</label>
                <select class="form-select" id="testFilterModality">
                  <option value="">All</option>
                </select>
              </div>
              <div class="col-md-12 d-flex justify-content-end">
                <button class="btn btn-primary me-2" id="testApplyFilters">Apply Filters</button>
                <button class="btn btn-secondary" id="testResetFilters">Reset Filters</button>
              </div>
            </div>
          </div>
        </div>

        <!-- Test Cases Table Section -->
        <div class="table-container">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <h5>Total Count: <span id="testTotalCount">0</span></h5>
          </div>
          <div class="table-responsive">
            <table class="table table-striped table-hover">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Title</th>
                  <th>Description</th>
                  <th>Category</th>
                  <th>Modality</th>
                </tr>
              </thead>
              <tbody id="testTableBody"></tbody>
            </table>
          </div>
          <div class="pagination-section">
            <div id="testPaginationStatus">Page 1 of 1 (0 results)</div>
            <div>
              <button class="btn btn-outline-primary btn-sm me-1" id="testFirstPage">First</button>
              <button class="btn btn-outline-primary btn-sm me-1" id="testPrevPage">Previous</button>
              <button class="btn btn-outline-primary btn-sm me-1" id="testNextPage">Next</button>
              <button class="btn btn-outline-primary btn-sm" id="testLastPage">Last</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Changelogs Tab (Placeholder) -->
      <div class="tab-pane fade" id="changelogs" role="tabpanel" aria-labelledby="changelogs-tab">
        <div class="table-container">
          <h5>Changelogs content to be implemented</h5>
        </div>
      </div>
    </div>
  </div>

  <!-- Jira Modal -->
  <div class="modal fade" id="jiraModal" tabindex="-1" aria-labelledby="jiraModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="jiraModalLabel">Jira - Tests for Engagement</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <!-- Jira Filter Section -->
          <div class="filter-section">
            <div class="d-flex justify-content-between align-items-center mb-2">
              <h5 class="mb-0">Filters</h5>
              <button class="btn btn-link" type="button" data-bs-toggle="collapse" data-bs-target="#jiraFilterCollapse" aria-expanded="true" aria-controls="jiraFilterCollapse">
                <i class="bi bi-chevron-down"></i> Toggle Filters
              </button>
            </div>
            <div class="collapse show" id="jiraFilterCollapse">
              <div class="row g-3">
                <div class="col-md-4">
                  <label for="jiraFilterTitle" class="form-label">Title</label>
                  <input type="text" class="form-control" id="jiraFilterTitle" placeholder="Enter title">
                </div>
                <div class="col-md-4">
                  <label for="jiraFilterStatus" class="form-label">Status</label>
                  <select class="form-select" id="jiraFilterStatus">
                    <option value="">All</option>
                    <option value="Not Started">Not Started</option>
                    <option value="Pass">Pass</option>
                    <option value="Fail">Fail</option>
                    <option value="NA">NA</option>
                  </select>
                </div>
                <div class="col-md-4">
                  <label for="jiraFilterAssignedTo" class="form-label">Assigned To</label>
                  <select class="form-select" id="jiraFilterAssignedTo">
                    <option value="">All</option>
                  </select>
                </div>
                <div class="col-md-12 d-flex justify-content-end">
                  <button class="btn btn-primary me-2" id="jiraApplyFilters">Apply Filters</button>
                  <button class="btn btn-secondary" id="jiraResetFilters">Reset Filters</button>
                </div>
              </div>
            </div>
          </div>

          <!-- Jira Table Section -->
          <div class="table-container modal-table-container">
            <div class="d-flex justify-content-between align-items-center mb-3">
              <h5>Total Count: <span id="jiraTotalCount">0</span></h5>
            </div>
            <div class="table-responsive">
              <table class="table table-striped table-hover">
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Status</th>
                    <th>Assigned To</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody id="jiraTableBody"></tbody>
              </table>
            </div>
            <div class="pagination-section">
              <div id="jiraPaginationStatus">Page 1 of 1 (0 results)</div>
              <div>
                <button class="btn btn-outline-primary btn-sm me-1" id="jiraFirstPage">First</button>
                <button class="btn btn-outline-primary btn-sm me-1" id="jiraPrevPage">Previous</button>
                <button class="btn btn-outline-primary btn-sm me-1" id="jiraNextPage">Next</button>
                <button class="btn btn-outline-primary btn-sm" id="jiraLastPage">Last</button>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Test Case Jira Mapping Modal -->
  <div class="modal fade" id="mappingModal" tabindex="-1" aria-labelledby="mappingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="mappingModalLabel">Test Case Jira Mapping</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <!-- Jira Test Title -->
          <h2 class="text-center mb-4" id="mappingJiraTestTitle">Test mapping for Jira: Loading...</h2>

          <!-- Mapping Filter Section -->
          <div class="filter-section">
            <div class="d-flex justify-content-between align-items-center mb-2">
              <h5 class="mb-0">Filters</h5>
              <button class="btn btn-link" type="button" data-bs-toggle="collapse" data-bs-target="#mappingFilterCollapse" aria-expanded="true" aria-controls="mappingFilterCollapse">
                <i class="bi bi-chevron-down"></i> Toggle Filters
              </button>
            </div>
            <div class="collapse show" id="mappingFilterCollapse">
              <div class="row g-3">
                <div class="col-md-2">
                  <label for="mappingFilterCreated" class="form-label">Created</label>
                  <input type="date" class="form-control" id="mappingFilterCreated">
                </div>
                <div class="col-md-2">
                  <label for="mappingFilterTitle" class="form-label">Title</label>
                  <input type="text" class="form-control" id="mappingFilterTitle" placeholder="Enter title">
                </div>
                <div class="col-md-2">
                  <label for="mappingFilterCategory" class="form-label">Category</label>
                  <select class="form-select" id="mappingFilterCategory">
                    <option value="">All</option>
                  </select>
                </div>
                <div class="col-md-2">
                  <label for="mappingFilterModality" class="form-label">Modality</label>
                  <select class="form-select" id="mappingFilterModality">
                    <option value="">All</option>
                  </select>
                </div>
                <div class="col-md-2">
                  <label for="mappingFilterMap" class="form-label">Map</label>
                  <select class="form-select" id="mappingFilterMap">
                    <option value="">All</option>
                    <option value="NA">NA</option>
                    <option value="Yes">Yes</option>
                    <option value="No">No</option>
                  </select>
                </div>
                <div class="col-md-12 d-flex justify-content-end">
                  <button class="btn btn-primary me-2" id="mappingApplyFilters">Apply Filters</button>
                  <button class="btn btn-secondary me-2" id="mappingResetFilters">Reset Filters</button>
                  <button class="btn btn-success" id="mappingSaveTests">Save</button>
                </div>
              </div>
            </div>
          </div>

          <!-- Mapping Table Section -->
          <div class="table-container modal-table-container">
            <div class="d-flex justify-content-between align-items-center mb-3">
              <h5>Total Count: <span id="mappingTotalCount">0</span></h5>
              <div>
                <input type="checkbox" id="mappingSelectAll" class="form-check-input me-2">
                <label for="mappingSelectAll" class="form-check-label">Select All</label>
              </div>
            </div>
            <div class="table-responsive">
              <table class="table table-striped table-hover">
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Category</th>
                    <th>Modality</th>
                    <th>Map</th>
                  </tr>
                </thead>
                <tbody id="mappingTableBody"></tbody>
              </table>
            </div>
            <div class="pagination-section">
              <div id="mappingPaginationStatus">Page 1 of 1 (0 results)</div>
              <div>
                <button class="btn btn-outline-primary btn-sm me-1" id="mappingFirstPage">First</button>
                <button class="btn btn-outline-primary btn-sm me-1" id="mappingPrevPage">Previous</button>
                <button class="btn btn-outline-primary btn-sm me-1" id="mappingNextPage">Next</button>
                <button class="btn btn-outline-primary btn-sm" id="mappingLastPage">Last</button>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Tests Modal -->
  <div class="modal fade" id="testsModal" tabindex="-1" aria-labelledby="testsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header text-center">
          <h5 class="modal-title w-100" id="testsModalLabel">Tests for Engagement</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <!-- Tests Filter Section -->
          <div class="filter-section mb-3">
            <div class="row g-3">
              <div class="col-md-3">
                <label for="testsFilterId" class="form-label">ID</label>
                <input type="text" class="form-control" id="testsFilterId" placeholder="Enter ID">
              </div>
              <div class="col-md-3">
                <label for="testsFilterTestName" class="form-label">Test Name</label>
                <select class="form-select" id="testsFilterTestName">
                  <option value="">All</option>
                </select>
              </div>
              <div class="col-md-3">
                <label for="testsFilterTitle" class="form-label">Title</label>
                <input type="text" class="form-control" id="testsFilterTitle" placeholder="Enter title">
              </div>
              <div class="col-md-3">
                <label for="testsFilterStatus" class="form-label">Status</label>
                <select class="form-select" id="testsFilterStatus">
                  <option value="">All</option>
                  <option value="NA">NA</option>
                  <option value="Pass">Pass</option>
                  <option value="Fail">Fail</option>
                </select>
              </div>
              <div class="col-md-3 d-flex align-items-end">
                <button class="btn btn-primary me-2" id="testsApplyFilters">Apply Filters</button>
                <button class="btn btn-secondary" id="testsResetFilters">Reset Filters</button>
              </div>
            </div>
          </div>
          <!-- Tests Table -->
          <div class="table-responsive">
            <table class="table table-striped table-hover">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Test Name</th>
                  <th>Title</th>
                  <th>Description</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody id="testsTableBody"></tbody>
            </table>
          </div>
          <div class="pagination-section">
            <div id="testsPaginationStatus">Page 1 of 1 (0 results)</div>
            <div>
              <button class="btn btn-outline-primary btn-sm me-1" id="testsFirstPage">First</button>
              <button class="btn btn-outline-primary btn-sm me-1" id="testsPrevPage">Previous</button>
              <button class="btn btn-outline-primary btn-sm me-1" id="testsNextPage">Next</button>
              <button class="btn btn-outline-primary btn-sm" id="testsLastPage">Last</button>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Toast Container -->
  <div id="toastContainer" class="toast-container position-fixed bottom-0 end-0 p-3"></div>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
  <script>
    // Shared Variables and Functions
    let usersCache = {};
    let csrfToken = null;
    let engProductsCache = {};

    async function fetchCsrfToken() {
      try {
        const response = await fetch('https://demo.defectdojo.org/api/key-v2');
        if (!response.ok) {
          showToast(`Failed to fetch CSRF token page: ${response.status}`, 'error');
          return;
        }
        const html = await response.text();
        const patterns = [
          /name="csrfmiddlewaretoken"\s+value="([^"]+)"/,
          /name="csrf_token"\s+value="([^"]+)"/,
          /<meta name="csrf-token" content="([^"]+)"/,
          /var\s+csrf_token\s*=\s*['"]([^'"]+)['"]/
        ];
        for (const pattern of patterns) {
          const match = html.match(pattern);
          if (match) {
            csrfToken = match[1];
            console.log('CSRF token fetched:', csrfToken);
            return;
          }
        }
        console.error('CSRF token not found. HTML response:', html);
        showToast('CSRF token not found in API key page. Check console for HTML.', 'error');
      } catch (error) {
        console.error('Error fetching CSRF token:', error);
        showToast('Error fetching CSRF token: ' + error.message, 'error');
      }
    }

    async function fetchAllUsers() {
      try {
        const response = await fetch('https://demo.defectdojo.org/api/v2/users/');
        if (response.ok) {
          const data = await response.json();
          console.log('Users API response:', data);
          const users = Array.isArray(data) ? data : data.results || [];
          users.forEach(user => {
            usersCache[user.id] = { id: user.id, name: `${user.first_name || ''} ${user.last_name || ''}`.trim() || 'Unknown' };
          });
        } else {
          showToast('Failed to fetch users', 'error');
        }
      } catch (error) {
        console.error('Error fetching users:', error);
      }
    }

    async function engFetchAllProducts() {
      try {
        const response = await fetch('https://demo.defectdojo.org/api/v2/products/?limit=100');
        if (response.ok) {
          const data = await response.json();
          console.log('Products API response:', data);
          const products = Array.isArray(data) ? data : data.results || [];
          products.forEach(product => {
            engProductsCache[product.id] = { id: product.id, name: product.name || 'Unknown' };
          });
        } else {
          showToast('Failed to fetch products', 'error');
        }
      } catch (error) {
        console.error('Error fetching products:', error);
      }
    }

    function showToast(message, type = 'info') {
      const toastContainer = document.getElementById('toastContainer');
      const toast = document.createElement('div');
      toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : type === 'warning' ? 'warning' : type === 'success' ? 'success' : type} border-0`;
      toast.setAttribute('role', 'alert');
      toast.innerHTML = `
        <div class="d-flex">
          <div class="toast-body">${message}</div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      `;
      toastContainer.appendChild(toast);
      const bsToast = new bootstrap.Toast(toast, { autohide: true, delay: 5000 });
      bsToast.show();
      toast.addEventListener('hidden.bs.toast', () => toast.remove());
    }

    // Engagements-Test-Count Tab Logic
    let engTestCountAllData = [];
    let engTestCountFilteredData = [];
    let engTestCountCurrentPage = 1;
    const engTestCountPageSize = 10;

    let testsAllData = [];
    let testsFilteredData = [];
    let testsCurrentPage = 1;
    const testsPageSize = 10;

    async function engTestCountFetchData() {
      try {
        const engResponse = await fetch('https://demo.defectdojo.org/api/v2/engagements/?limit=100');
        if (!engResponse.ok) {
          showToast(`Failed to fetch engagements: ${engResponse.status}`, 'error');
          return;
        }
        const engData = await engResponse.json();
        const engagements = Array.isArray(engData) ? engData : engData.results || [];

        engTestCountAllData = [];

        for (const eng of engagements) {
          const testsResponse = await fetch(`https://demo.defectdojo.org/api/v2/tests/?engagement=${eng.id}&tags=pci_jira_owasp&limit=100`);
          if (!testsResponse.ok) {
            console.error(`Failed to fetch tests for engagement ${eng.id}: ${testsResponse.status}`);
            continue;
          }
          const testsData = await testsResponse.json();
          const tests = Array.isArray(testsData) ? testsData : testsData.results || [];
          const testCount = tests.length;

          engTestCountAllData.push({
            id: eng.id,
            created: eng.created,
            name: eng.name,
            target_start: eng.target_start,
            target_end: eng.target_end,
            lead: eng.lead,
            lead_name: eng.lead ? usersCache[eng.lead]?.name || 'Unassigned' : 'Unassigned',
            product: eng.product,
            product_name: engProductsCache[eng.product]?.name || 'Unknown',
            status: eng.status || 'In Progress',
            build_id: eng.build_id || 'Pending',
            test_count: testCount
          });
        }

        if (engTestCountAllData.length === 0) {
          showToast('No engagements found', 'warning');
        }

        engTestCountFilteredData = [...engTestCountAllData];
        engTestCountApplyFilters();
        await engTestCountPopulateFilterDropdowns();
      } catch (error) {
        console.error('Error fetching engagements:', error);
        showToast('Error fetching engagements: ' + error.message, 'error');
      }
    }

    async function engTestCountPopulateFilterDropdowns() {
      const assignedToSelect = document.getElementById('engTestCountFilterAssignedTo');
      assignedToSelect.innerHTML = '<option value="">All</option>';
      Object.values(usersCache).forEach(user => {
        const option = document.createElement('option');
        option.value = user.id;
        option.textContent = user.name;
        assignedToSelect.appendChild(option);
      });

      const componentSelect = document.getElementById('engTestCountFilterComponent');
      componentSelect.innerHTML = '<option value="">All</option>';
      Object.values(engProductsCache).forEach(product => {
        const option = document.createElement('option');
        option.value = product.id;
        option.textContent = product.name;
        componentSelect.appendChild(option);
      });

      $('#engTestCountFilterAssignedTo, #engTestCountFilterComponent').select2({
        theme: 'bootstrap-5',
        width: '100%',
        placeholder: 'Search...',
        allowClear: true
      });
    }

    function engTestCountApplyFilters() {
      const id = document.getElementById('engTestCountFilterId').value;
      const created = document.getElementById('engTestCountFilterCreated').value;
      const name = document.getElementById('engTestCountFilterName').value.toLowerCase();
      const targetStart = document.getElementById('engTestCountFilterTargetStart').value;
      const targetEnd = document.getElementById('engTestCountFilterTargetEnd').value;
      const assignedTo = document.getElementById('engTestCountFilterAssignedTo').value;
      const component = document.getElementById('engTestCountFilterComponent').value;
      const status = document.getElementById('engTestCountFilterStatus').value;
      const certification = document.getElementById('engTestCountFilterCertification').value;

      engTestCountFilteredData = engTestCountAllData.filter(item => {
        if (id && item.id.toString() !== id) return false;
        if (created && item.created?.slice(0, 10) !== created) return false;
        if (name && item.name?.toLowerCase().includes(name) === false) return false;
        if (targetStart && item.target_start?.slice(0, 10) !== targetStart) return false;
        if (targetEnd && item.target_end?.slice(0, 10) !== targetEnd) return false;
        if (assignedTo && item.lead != assignedTo) return false;
        if (component && item.product != component) return false;
        if (status && item.status !== status) return false;
        if (certification && item.build_id !== certification) return false;
        return true;
      });

      engTestCountCurrentPage = 1;
      engTestCountRenderTable();
    }

    function engTestCountResetFilters() {
      document.getElementById('engTestCountFilterId').value = '';
      document.getElementById('engTestCountFilterCreated').value = '';
      document.getElementById('engTestCountFilterName').value = '';
      document.getElementById('engTestCountFilterTargetStart').value = '';
      document.getElementById('engTestCountFilterTargetEnd').value = '';
      $('#engTestCountFilterAssignedTo').val('').trigger('change');
      $('#engTestCountFilterComponent').val('').trigger('change');
      document.getElementById('engTestCountFilterStatus').value = '';
      document.getElementById('engTestCountFilterCertification').value = '';
      engTestCountApplyFilters();
    }

    async function updateEngagementField(engagementId, field, value) {
      if (!csrfToken) {
        showToast('CSRF token not available. Please try again.', 'error');
        return;
      }
      try {
        const updateData = { [field]: value };
        const response = await fetch(`https://demo.defectdojo.org/api/v2/engagements/${engagementId}/`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': csrfToken
          },
          body: JSON.stringify(updateData)
        });
        if (!response.ok) {
          showToast(`Failed to update engagement ${field}: ${response.status}`, 'error');
          return;
        }
        showToast(`Engagement ${field} updated successfully`, 'success');
        const index = engTestCountAllData.findIndex(item => item.id === engagementId);
        if (index !== -1) {
          engTestCountAllData[index][field] = value;
          if (field === 'lead') {
            engTestCountAllData[index].lead_name = usersCache[value]?.name || 'Unassigned';
          } else if (field === 'product') {
            engTestCountAllData[index].product_name = engProductsCache[value]?.name || 'Unknown';
          }
          engTestCountApplyFilters();
        }
      } catch (error) {
        console.error(`Error updating engagement ${field}:`, error);
        showToast(`Error updating engagement ${field}: ${error.message}`, 'error');
      }
    }

    function engTestCountRenderTable() {
      const start = (engTestCountCurrentPage - 1) * engTestCountPageSize;
      const pagedData = engTestCountFilteredData.slice(start, start + engTestCountPageSize);
      const totalPages = Math.ceil(engTestCountFilteredData.length / engTestCountPageSize);

      document.getElementById('engTestCountTotalCount').textContent = engTestCountFilteredData.length;

      const tableBody = document.getElementById('engTestCountTableBody');
      tableBody.innerHTML = pagedData.map(item => `
        <tr>
          <td>${item.id || 'N/A'}</td>
          <td>${item.created?.slice(0, 10) || 'N/A'}</td>
          <td><a href="#" class="jira-link" data-engagement-id="${item.id}">${item.name || 'N/A'}</a></td>
          <td>
            <input type="date" class="form-control date-picker" data-engagement-id="${item.id}" data-field="target_start" value="${item.target_start?.slice(0, 10) || ''}">
          </td>
          <td>
            <input type="date" class="form-control date-picker" data-engagement-id="${item.id}" data-field="target_end" value="${item.target_end?.slice(0, 10) || ''}">
          </td>
          <td>
            <select class="form-select select-field assigned-to-select" data-engagement-id="${item.id}">
              <option value="">Unassigned</option>
              ${Object.values(usersCache).map(user => `
                <option value="${user.id}" ${item.lead == user.id ? 'selected' : ''}>${user.name}</option>
              `).join('')}
            </select>
          </td>
          <td>
            <select class="form-select select-field component-select" data-engagement-id="${item.id}">
              ${Object.values(engProductsCache).map(product => `
                <option value="${product.id}" ${item.product == product.id ? 'selected' : ''}>${product.name}</option>
              `).join('')}
            </select>
          </td>
          <td>
            <select class="form-select select-field status-select" data-engagement-id="${item.id}">
              <option value="Not Started" ${item.status === 'Not Started' ? 'selected' : ''}>Not Started</option>
              <option value="In Progress" ${item.status === 'In Progress' ? 'selected' : ''}>In Progress</option>
              <option value="On Hold" ${item.status === 'On Hold' ? 'selected' : ''}>On Hold</option>
              <option value="Completed" ${item.status === 'Completed' ? 'selected' : ''}>Completed</option>
            </select>
          </td>
          <td>
            <select class="form-select select-field certification-select" data-engagement-id="${item.id}">
              <option value="Pending" ${item.build_id === 'Pending' ? 'selected' : ''}>Pending</option>
              <option value="Certified" ${item.build_id === 'Certified' ? 'selected' : ''}>Certified</option>
              <option value="Not Certified" ${item.build_id === 'Not Certified' ? 'selected' : ''}>Not Certified</option>
              <option value="Certified with Exception" ${item.build_id === 'Certified with Exception' ? 'selected' : ''}>Certified with Exception</option>
            </select>
          </td>
          <td><a href="#" class="test-count-link" data-engagement-id="${item.id}">${item.test_count}</a></td>
        </tr>
      `).join('');

      document.getElementById('engTestCountPaginationStatus').textContent = `Page ${engTestCountCurrentPage} of ${totalPages} (${engTestCountFilteredData.length} results)`;
      document.getElementById('engTestCountFirstPage').disabled = engTestCountCurrentPage === 1;
      document.getElementById('engTestCountPrevPage').disabled = engTestCountCurrentPage === 1;
      document.getElementById('engTestCountNextPage').disabled = engTestCountCurrentPage === totalPages;
      document.getElementById('engTestCountLastPage').disabled = engTestCountCurrentPage === totalPages;

      document.querySelectorAll('.jira-link').forEach(link => {
        link.addEventListener('click', (event) => {
          event.preventDefault();
          const engagementId = link.getAttribute('data-engagement-id');
          const engagement = engTestCountAllData.find(item => item.id == engagementId);
          jiraFetchTests(engagementId);
          const modal = new bootstrap.Modal(document.getElementById('jiraModal'), {
            backdrop: 'static',
            keyboard: false
          });
          document.getElementById('jiraModalLabel').textContent = `Jira - Tests for ${engagement?.name || 'Engagement ' + engagementId}`;
          modal.show();
        });
      });

      document.querySelectorAll('.test-count-link').forEach(link => {
        link.addEventListener('click', async (event) => {
          event.preventDefault();
          const engagementId = link.getAttribute('data-engagement-id');
          const engagement = engTestCountAllData.find(item => item.id == engagementId);
          await fetchTestsForEngagement(engagementId);
          const modal = new bootstrap.Modal(document.getElementById('testsModal'), {
            backdrop: 'static',
            keyboard: false
          });
          document.getElementById('testsModalLabel').textContent = `Tests for ${engagement?.name || 'Engagement ' + engagementId}`;
          modal.show();
        });
      });

      document.querySelectorAll('.date-picker').forEach(input => {
        input.addEventListener('change', (event) => {
          const engagementId = event.target.getAttribute('data-engagement-id');
          const field = event.target.getAttribute('data-field');
          const value = event.target.value;
          updateEngagementField(engagementId, field, value);
        });
      });

      document.querySelectorAll('.assigned-to-select').forEach(select => {
        $(select).select2({
          theme: 'bootstrap-5',
          width: '100%',
          placeholder: 'Select user...',
          allowClear: true
        });
        select.addEventListener('change', (event) => {
          const engagementId = event.target.getAttribute('data-engagement-id');
          const value = event.target.value;
          updateEngagementField(engagementId, 'lead', value);
        });
      });

      document.querySelectorAll('.component-select').forEach(select => {
        $(select).select2({
          theme: 'bootstrap-5',
          width: '100%',
          placeholder: 'Select component...',
          allowClear: true
        });
        select.addEventListener('change', (event) => {
          const engagementId = event.target.getAttribute('data-engagement-id');
          const value = event.target.value;
          updateEngagementField(engagementId, 'product', value);
        });
      });

      document.querySelectorAll('.status-select').forEach(select => {
        select.addEventListener('change', (event) => {
          const engagementId = event.target.getAttribute('data-engagement-id');
          const value = event.target.value;
          updateEngagementField(engagementId, 'status', value);
        });
      });

      document.querySelectorAll('.certification-select').forEach(select => {
        select.addEventListener('change', (event) => {
          const engagementId = event.target.getAttribute('data-engagement-id');
          const value = event.target.value;
          updateEngagementField(engagementId, 'build_id', value);
        });
      });
    }

    async function fetchTestsForEngagement(engagementId) {
      try {
        const response = await fetch(`https://demo.defectdojo.org/api/v2/tests/?engagement=${engagementId}&tags=pci_jira_owasp&limit=100`);
        if (!response.ok) {
          showToast(`Failed to fetch tests: ${response.status}`, 'error');
          return;
        }
        const testsData = await response.json();
        const tests = Array.isArray(testsData) ? testsData : testsData.results || [];

        testsAllData = [];

        for (const test of tests) {
          let referencedTitle = 'N/A';
          if (test.commit_hash && test.commit_hash.includes('_')) {
            const testId = test.commit_hash.split('_')[0];
            try {
              const titleResponse = await fetch(`https://demo.defectdojo.org/api/v2/tests/${testId}/`);
              if (titleResponse.ok) {
                const titleData = await titleResponse.json();
                referencedTitle = titleData.title || 'N/A';
              }
            } catch (error) {
              console.error(`Error fetching title for test ${testId}:`, error);
            }
          }

          testsAllData.push({
            id: test.id,
            test_name: test.title || 'N/A',
            title: referencedTitle,
            description: test.description || '',
            status: test.build_id || 'NA'
          });
        }

        testsFilteredData = [...testsAllData];
        testsCurrentPage = 1;
        testsApplyFilters();
        await populateTestNameFilter();
      } catch (error) {
        console.error('Error fetching tests:', error);
        showToast('Error fetching tests: ' + error.message, 'error');
      }
    }

    async function populateTestNameFilter() {
      const testNameSelect = document.getElementById('testsFilterTestName');
      const uniqueTestNames = [...new Set(testsAllData.map(item => item.test_name))].sort();
      testNameSelect.innerHTML = '<option value="">All</option>';
      uniqueTestNames.forEach(name => {
        const option = document.createElement('option');
        option.value = name;
        option.textContent = name;
        testNameSelect.appendChild(option);
      });

      $('#testsFilterTestName').select2({
        theme: 'bootstrap-5',
        width: '100%',
        placeholder: 'Search...',
        allowClear: true
      });
    }

    async function updateTestStatus(testId, newStatus) {
      if (!csrfToken) {
        showToast('CSRF token not available. Please try again.', 'error');
        return;
      }
      try {
        const response = await fetch(`https://demo.defectdojo.org/api/v2/tests/${testId}/`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': csrfToken
          },
          body: JSON.stringify({ build_id: newStatus })
        });
        if (!response.ok) {
          showToast(`Failed to update test status: ${response.status}`, 'error');
          return;
        }
        showToast('Test status updated successfully', 'success');
        const testIndex = testsAllData.findIndex(t => t.id === testId);
        if (testIndex !== -1) {
          testsAllData[testIndex].status = newStatus;
          testsApplyFilters();
        }
      } catch (error) {
        console.error('Error updating test status:', error);
        showToast('Error updating test status: ' + error.message, 'error');
      }
    }

    function testsApplyFilters() {
      const id = document.getElementById('testsFilterId').value;
      const testName = document.getElementById('testsFilterTestName').value;
      const title = document.getElementById('testsFilterTitle').value.toLowerCase();
      const status = document.getElementById('testsFilterStatus').value;

      testsFilteredData = testsAllData.filter(item => {
        if (id && item.id.toString() !== id) return false;
        if (testName && item.test_name !== testName) return false;
        if (title && item.title?.toLowerCase().includes(title) === false) return false;
        if (status && item.status !== status) return false;
        return true;
      });

      testsCurrentPage = 1;
      testsRenderTable();
    }

    function testsResetFilters() {
      document.getElementById('testsFilterId').value = '';
      $('#testsFilterTestName').val('').trigger('change');
      document.getElementById('testsFilterTitle').value = '';
      document.getElementById('testsFilterStatus').value = '';
      testsApplyFilters();
    }

    function testsRenderTable() {
      const start = (testsCurrentPage - 1) * testsPageSize;
      const pagedData = testsFilteredData.slice(start, start + testsPageSize);
      const totalPages = Math.ceil(testsFilteredData.length / testsPageSize);

      const tableBody = document.getElementById('testsTableBody');
      tableBody.innerHTML = pagedData.map(item => `
        <tr>
          <td>${item.id || 'N/A'}</td>
          <td>${item.test_name || 'N/A'}</td>
          <td>${item.title || 'N/A'}</td>
          <td>${item.description || ''}</td>
          <td>
            <select class="form-select status-select" data-test-id="${item.id}">
              <option value="NA" ${item.status === 'NA' ? 'selected' : ''}>NA</option>
              <option value="Pass" ${item.status === 'Pass' ? 'selected' : ''}>Pass</option>
              <option value="Fail" ${item.status === 'Fail' ? 'selected' : ''}>Fail</option>
            </select>
          </td>
        </tr>
      `).join('');

      document.getElementById('testsPaginationStatus').textContent = `Page ${testsCurrentPage} of ${totalPages} (${testsFilteredData.length} results)`;
      document.getElementById('testsFirstPage').disabled = testsCurrentPage === 1;
      document.getElementById('testsPrevPage').disabled = testsCurrentPage === 1;
      document.getElementById('testsNextPage').disabled = testsCurrentPage === totalPages;
      document.getElementById('testsLastPage').disabled = testsCurrentPage === totalPages;

      document.querySelectorAll('.status-select').forEach(select => {
        select.addEventListener('change', (event) => {
          const testId = event.target.getAttribute('data-test-id');
          const newStatus = event.target.value;
          updateTestStatus(testId, newStatus);
        });
      });
    }

    // Test Cases Tab Logic
    let testAllTests = [];
    let testFilteredTests = [];
    let testCategoryCache = {};
    let testModalityCache = {};
    let testCurrentPage = 1;
    const testPageSize = 10;

    async function testFetchTests() {
      try {
        const response = await fetch('https://demo.defectdojo.org/api/v2/tests/?engagement=1&tags=owasp&limit=100');
        if (response.ok) {
          const data = await response.json();
          console.log('Tests API response:', data);
          testAllTests = Array.isArray(data) ? data : data.results || [];
          if (testAllTests.length === 0) {
            showToast('No test cases found for engagement 1 with tag "owasp"', 'warning');
          }
          testPopulateCaches();
          testFilteredTests = [...testAllTests];
          testApplyFilters();
        } else {
          showToast(`Failed to fetch test cases: ${response.status}`, 'error');
        }
      } catch (error) {
        console.error('Error fetching test cases:', error);
        showToast('Error fetching test cases: ' + error.message, 'error');
      }
    }

    function testPopulateCaches() {
      testCategoryCache = {};
      testModalityCache = {};
      testAllTests.forEach(test => {
        if (test.build_id) {
          testCategoryCache[test.build_id] = test.build_id;
        }
        if (test.commit_hash) {
          testModalityCache[test.commit_hash] = test.commit_hash;
        }
      });
    }

    async function testPopulateFilterDropdowns() {
      const categorySelect = document.getElementById('testFilterCategory');
      categorySelect.innerHTML = '<option value="">All</option>';
      Object.values(testCategoryCache).forEach(category => {
        const option = document.createElement('option');
        option.value = category;
        option.textContent = category;
        categorySelect.appendChild(option);
      });

      const modalitySelect = document.getElementById('testFilterModality');
      modalitySelect.innerHTML = '<option value="">All</option>';
      Object.values(testModalityCache).forEach(modality => {
        const option = document.createElement('option');
        option.value = modality;
        option.textContent = modality;
        modalitySelect.appendChild(option);
      });

      $('#testFilterCategory, #testFilterModality').select2({
        theme: 'bootstrap-5',
        width: '100%',
        placeholder: 'Search...',
        allowClear: true
      });
    }

    function testApplyFilters() {
      const created = document.getElementById('testFilterCreated').value;
      const title = document.getElementById('testFilterTitle').value.toLowerCase();
      const category = document.getElementById('testFilterCategory').value;
      const modality = document.getElementById('testFilterModality').value;

      testFilteredTests = testAllTests.filter(t => {
        if (created && t.created?.slice(0, 10) !== created) return false;
        if (title && t.title?.toLowerCase().includes(title) === false) return false;
        if (category && t.build_id !== category) return false;
        if (modality && t.commit_hash !== modality) return false;
        return true;
      });

      testCurrentPage = 1;
      testRenderTable();
    }

    function testResetFilters() {
      document.getElementById('testFilterCreated').value = '';
      document.getElementById('testFilterTitle').value = '';
      $('#testFilterCategory').val('').trigger('change');
      $('#testFilterModality').val('').trigger('change');
      testApplyFilters();
    }

    function testRenderTable() {
      const start = (testCurrentPage - 1) * testPageSize;
      const pagedData = testFilteredTests.slice(start, start + testPageSize);
      const totalPages = Math.ceil(testFilteredTests.length / testPageSize);

      document.getElementById('testTotalCount').textContent = testFilteredTests.length;

      const tableBody = document.getElementById('testTableBody');
      tableBody.innerHTML = pagedData.map(t => `
        <tr>
          <td>${t.id || 'N/A'}</td>
          <td>${t.title || 'N/A'}</td>
          <td>${t.description || ''}</td>
          <td>${t.build_id || 'N/A'}</td>
          <td>${t.commit_hash || 'N/A'}</td>
        </tr>
      `).join('');

      document.getElementById('testPaginationStatus').textContent = `Page ${testCurrentPage} of ${totalPages} (${testFilteredTests.length} results)`;
      document.getElementById('testFirstPage').disabled = testCurrentPage === 1;
      document.getElementById('testPrevPage').disabled = testCurrentPage === 1;
      document.getElementById('testNextPage').disabled = testCurrentPage === totalPages;
      document.getElementById('testLastPage').disabled = testCurrentPage === totalPages;
    }

    // Jira Modal Logic
    let jiraAllTests = [];
    let jiraFilteredTests = [];
    let jiraCurrentPage = 1;
    const jiraPageSize = 10;
    let currentEngagementId = null;

    async function jiraFetchTests(engagementId) {
      try {
        currentEngagementId = engagementId;
        const response = await fetch(`https://demo.defectdojo.org/api/v2/tests/?engagement=${engagementId}&tags=pci_jira&limit=100`);
        if (response.ok) {
          const data = await response.json();
          console.log('Jira Tests API response:', data);
          jiraAllTests = Array.isArray(data) ? data : data.results || [];
          if (jiraAllTests.length === 0) {
            showToast(`No test cases found for engagement ${engagementId} with tag "pci_jira"`, 'warning');
          }
          jiraFilteredTests = [...jiraAllTests];
          jiraApplyFilters();
          await jiraPopulateFilterDropdowns();
        } else {
          showToast(`Failed to fetch Jira test cases: ${response.status}`, 'error');
        }
      } catch (error) {
        console.error('Error fetching Jira test cases:', error);
        showToast('Error fetching Jira test cases: ' + error.message, 'error');
      }
    }

    async function jiraSaveTest(testId, updates) {
      if (!csrfToken) {
        showToast('CSRF token not available. Please try again.', 'error');
        return;
      }
      try {
        const response = await fetch(`https://demo.defectdojo.org/api/v2/tests/${testId}/`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': csrfToken
          },
          body: JSON.stringify(updates)
        });
        if (response.ok) {
          showToast('Test updated successfully', 'success');
          const test = jiraAllTests.find(t => t.id == testId);
          Object.assign(test, updates);
          jiraApplyFilters();
        } else {
          showToast(`Failed to update test: ${response.status}`, 'error');
        }
      } catch (error) {
        console.error('Error saving test:', error);
        showToast('Error saving test: ' + error.message, 'error');
      }
    }

    async function jiraPopulateFilterDropdowns() {
      const assignedToSelect = document.getElementById('jiraFilterAssignedTo');
      assignedToSelect.innerHTML = '<option value="">All</option>';
      Object.values(usersCache).forEach(user => {
        const option = document.createElement('option');
        option.value = user.id;
        option.textContent = user.name;
        assignedToSelect.appendChild(option);
      });

      $('#jiraFilterAssignedTo').select2({
        theme: 'bootstrap-5',
        width: '100%',
        placeholder: 'Search...',
        allowClear: true
      });
    }

    function jiraApplyFilters() {
      const title = document.getElementById('jiraFilterTitle').value.toLowerCase();
      const status = document.getElementById('jiraFilterStatus').value;
      const assignedTo = document.getElementById('jiraFilterAssignedTo').value;

      jiraFilteredTests = jiraAllTests.filter(t => {
        if (title && t.title?.toLowerCase().includes(title) === false) return false;
        if (status && t.build_id !== status) return false;
        if (assignedTo && t.lead != assignedTo) return false;
        return true;
      });

      jiraCurrentPage = 1;
      jiraRenderTable();
    }

    function jiraResetFilters() {
      document.getElementById('jiraFilterTitle').value = '';
      document.getElementById('jiraFilterStatus').value = '';
      $('#jiraFilterAssignedTo').val('').trigger('change');
      jiraApplyFilters();
    }

    function jiraRenderTable() {
      const start = (jiraCurrentPage - 1) * jiraPageSize;
      const pagedData = jiraFilteredTests.slice(start, start + jiraPageSize);
      const totalPages = Math.ceil(jiraFilteredTests.length / jiraPageSize);

      document.getElementById('jiraTotalCount').textContent = jiraFilteredTests.length;

      const tableBody = document.getElementById('jiraTableBody');
      tableBody.innerHTML = pagedData.map(t => `
        <tr>
          <td>${t.id || 'N/A'}</td>
          <td>${t.title || 'N/A'}</td>
          <td><textarea class="description-textarea jira-description" data-test-id="${t.id}">${t.description || ''}</textarea></td>
          <td>
            <select class="form-select jira-status-select" data-test-id="${t.id}">
              <option value="Not Started" ${t.build_id === 'Not Started' ? 'selected' : ''}>Not Started</option>
              <option value="Pass" ${t.build_id === 'Pass' ? 'selected' : ''}>Pass</option>
              <option value="Fail" ${t.build_id === 'Fail' ? 'selected' : ''}>Fail</option>
              <option value="NA" ${t.build_id === 'NA' ? 'selected' : ''}>NA</option>
            </select>
          </td>
          <td>
            <select class="form-select jira-assigned-to-select" data-test-id="${t.id}">
              <option value="">Unassigned</option>
              ${Object.values(usersCache).map(user => `
                <option value="${user.id}" ${t.lead == user.id ? 'selected' : ''}>${user.name}</option>
              `).join('')}
            </select>
          </td>
          <td>
            <button class="btn btn-primary btn-sm mapping-link" data-test-id="${t.id}">Map</button>
          </td>
        </tr>
      `).join('');

      document.getElementById('jiraPaginationStatus').textContent = `Page ${jiraCurrentPage} of ${totalPages} (${jiraFilteredTests.length} results)`;
      document.getElementById('jiraFirstPage').disabled = jiraCurrentPage === 1;
      document.getElementById('jiraPrevPage').disabled = jiraCurrentPage === 1;
      document.getElementById('jiraNextPage').disabled = jiraCurrentPage === totalPages;
      document.getElementById('jiraLastPage').disabled = jiraCurrentPage === totalPages;

      $('.jira-assigned-to-select').select2({
        theme: 'bootstrap-5',
        width: '100%',
        placeholder: 'Search...',
        allowClear: true
      });

      document.querySelectorAll('.jira-description').forEach(textarea => {
        textarea.addEventListener('change', (event) => {
          const testId = event.target.getAttribute('data-test-id');
          const newDescription = event.target.value;
          jiraSaveTest(testId, { description: newDescription });
        });
      });

      document.querySelectorAll('.jira-status-select').forEach(select => {
        select.addEventListener('change', (event) => {
          const testId = event.target.getAttribute('data-test-id');
          const newStatus = event.target.value;
          jiraSaveTest(testId, { build_id: newStatus });
        });
      });

      document.querySelectorAll('.jira-assigned-to-select').forEach(select => {
        $(select).on('change', (event) => {
          const testId = event.target.getAttribute('data-test-id');
          const newLead = event.target.value || null;
          jiraSaveTest(testId, { lead: newLead });
        });
      });

      document.querySelectorAll('.mapping-link').forEach(button => {
        button.addEventListener('click', (event) => {
          const testId = button.getAttribute('data-test-id');
          mappingFetchTests(testId);
          const modal = new bootstrap.Modal(document.getElementById('mappingModal'), {
            backdrop: 'static',
            keyboard: false
          });
          modal.show();
        });
      });
    }

    // Test Case Jira Mapping Modal Logic
    let mappingAllTests = [];
    let mappingFilteredTests = [];
    let mappingCategoryCache = {};
    let mappingModalityCache = {};
    let mappingCurrentPage = 1;
    const mappingPageSize = 10;
    let currentJiraTestId = null;
    let currentJiraTestTitle = '';
    let mappingSelections = {};

    async function mappingFetchTests(jiraTestId) {
      try {
        currentJiraTestId = jiraTestId;
        const jiraTest = jiraAllTests.find(t => t.id == jiraTestId);
        if (!jiraTest || !jiraTest.engagement) {
          showToast('Jira test or engagement ID not found', 'error');
          document.getElementById('mappingJiraTestTitle').textContent = 'Test mapping for Jira: Not Found';
          return;
        }
        currentJiraTestTitle = jiraTest.title || 'Untitled';
        document.getElementById('mappingJiraTestTitle').textContent = `Test mapping for Jira: ${currentJiraTestTitle}`;
        const response = await fetch(`https://demo.defectdojo.org/api/v2/tests/?engagement=1&tags=owasp&limit=100`);
        if (response.ok) {
          const data = await response.json();
          console.log('Mapping Tests API response:', data);
          mappingAllTests = Array.isArray(data) ? data : data.results || [];
          if (mappingAllTests.length === 0) {
            showToast(`No test cases found for engagement ${jiraTest.engagement} with tag "owasp"`, 'warning');
          }
          mappingPopulateCaches();
          mappingFilteredTests = [...mappingAllTests];
          const mappedIds = jiraTest.commit_hash ? jiraTest.commit_hash.split(',').map(id => id.trim()) : [];
          mappingSelections = {};
          mappingAllTests.forEach(t => {
            mappingSelections[t.id] = mappedIds.includes(t.id.toString()) ? 'Yes' : 'NA';
          });
          mappingApplyFilters();
          await mappingPopulateFilterDropdowns();
        } else {
          showToast(`Failed to fetch mapping test cases: ${response.status}`, 'error');
        }
      } catch (error) {
        console.error('Error fetching mapping test cases:', error);
        showToast('Error fetching mapping test cases: ' + error.message, 'error');
        document.getElementById('mappingJiraTestTitle').textContent = 'Test mapping for Jira: Error';
      }
    }

    function mappingPopulateCaches() {
      mappingCategoryCache = {};
      mappingModalityCache = {};
      mappingAllTests.forEach(test => {
        if (test.build_id) {
          mappingCategoryCache[test.build_id] = test.build_id;
        }
        if (test.commit_hash) {
          mappingModalityCache[test.commit_hash] = test.commit_hash;
        }
      });
    }

    async function mappingPopulateFilterDropdowns() {
      const categorySelect = document.getElementById('mappingFilterCategory');
      categorySelect.innerHTML = '<option value="">All</option>';
      Object.values(mappingCategoryCache).forEach(category => {
        const option = document.createElement('option');
        option.value = category;
        option.textContent = category;
        categorySelect.appendChild(option);
      });

      const modalitySelect = document.getElementById('mappingFilterModality');
      modalitySelect.innerHTML = '<option value="">All</option>';
      Object.values(mappingModalityCache).forEach(modality => {
        const option = document.createElement('option');
        option.value = modality;
        option.textContent = modality;
        modalitySelect.appendChild(option);
      });

      $('#mappingFilterCategory, #mappingFilterModality').select2({
        theme: 'bootstrap-5',
        width: '100%',
        placeholder: 'Search...',
        allowClear: true
      });
    }

    function mappingApplyFilters() {
      const created = document.getElementById('mappingFilterCreated').value;
      const title = document.getElementById('mappingFilterTitle').value.toLowerCase();
      const category = document.getElementById('mappingFilterCategory').value;
      const modality = document.getElementById('mappingFilterModality').value;
      const map = document.getElementById('mappingFilterMap').value;

      mappingFilteredTests = mappingAllTests.filter(t => {
        if (created && t.created?.slice(0, 10) !== created) return false;
        if (title && t.title?.toLowerCase().includes(title) === false) return false;
        if (category && t.build_id !== category) return false;
        if (modality && t.commit_hash !== modality) return false;
        if (map && mappingSelections[t.id] !== map) return false;
        return true;
      });

      mappingCurrentPage = 1;
      mappingRenderTable();
    }

    function mappingResetFilters() {
      document.getElementById('mappingFilterCreated').value = '';
      document.getElementById('mappingFilterTitle').value = '';
      $('#mappingFilterCategory').val('').trigger('change');
      $('#mappingFilterModality').val('').trigger('change');
      document.getElementById('mappingFilterMap').value = '';
      mappingApplyFilters();
    }

    async function mappingSaveTests() {
      if (!csrfToken) {
        showToast('CSRF token not available. Please try again.', 'error');
        return;
      }
      try {
        const mappedIds = Object.entries(mappingSelections)
          .filter(([_, value]) => value === 'Yes')
          .map(([id]) => id);
        const commitHash = mappedIds.join(',');

        const response = await fetch(`https://demo.defectdojo.org/api/v2/tests/${currentJiraTestId}/`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': csrfToken
          },
          body: JSON.stringify({ commit_hash: commitHash })
        });

        if (response.ok) {
          showToast('Test mappings saved successfully', 'success');
          const jiraTest = jiraAllTests.find(t => t.id == currentJiraTestId);
          if (jiraTest) {
            jiraTest.commit_hash = commitHash;
            jiraApplyFilters();
          }
          const modal = bootstrap.Modal.getInstance(document.getElementById('mappingModal'));
          if (modal) modal.hide();
        } else {
          showToast(`Failed to save test mappings: ${response.status}`, 'error');
        }
      } catch (error) {
        console.error('Error saving test mappings:', error);
        showToast('Error saving test mappings: ' + error.message, 'error');
      }
    }

    function mappingRenderTable() {
      const start = (mappingCurrentPage - 1) * mappingPageSize;
      const pagedData = mappingFilteredTests.slice(start, start