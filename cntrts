import requests
import pandas as pd
from datetime import datetime
import os
from openpyxl import load_workbook
from openpyxl.styles import Alignment, Border, Side, Font

# Define variables
contrast_token = 'dhdjdjdjdjrjrjrjdj=='
OrgUUid = 'gshdhdhd'
App_Ids = ['hdj-jdjdjd-7788-jdjdjdj', 'hdjdjdjd', 'dhdjdkdkd']
api_key = 'hhjkkjdddjdkdk'

# Define headers
contrast_headers = {
    'Authorization': contrast_token,
    'Api-key': api_key,
    'Accept': 'application/json'
}

# Base URL for the API
base_url = 'https://contrast.crm.com/Contrast/api/ng/'

# Get current date dynamically (system date: 14-May-25, 03:42 PM IST)
current_date = datetime.now()
date_str = current_date.strftime('%d-%b-%y').upper()  # Format as DD-MMM-YY (e.g., 14-MAY-25)

# Step 1: Fetch data from the API and save to Data.xlsx
all_servers = []
for app_id in App_Ids:
    url = f"{base_url}{OrgUUid}/applications/{app_id}/servers"
    response = requests.get(url, headers=contrast_headers)
    if response.status_code == 200:
        data = response.json()
        servers = data.get('servers', [])
        for server in servers:
            row = {
                'app_id': app_id,
                'environment': server.get('environment', '').upper(),
                'status': server.get('status', ''),
                'server_id': server.get('server_id', ''),
                'name': server.get('name', ''),
                'agent_version': server.get('agent_version', '')
            }
            all_servers.append(row)
    else:
        print(f"Error for App ID {app_id}: {response.status_code} - {response.text}")

# Create DataFrame for raw data and save to Data.xlsx (overwrite daily)
raw_df = pd.DataFrame(all_servers)
raw_df = raw_df[['app_id', 'environment', 'status', 'server_id', 'name', 'agent_version']]
raw_df.to_excel('Data.xlsx', index=False)
print("Raw data successfully saved to Data.xlsx")

# Step 2: Process data for Final.xlsx (aggregate by agent_version and environment)
version_env_counts = {}
for server in all_servers:
    version = server['agent_version']
    env = server['environment']
    if version not in version_env_counts:
        version_env_counts[version] = {'DEVELOPMENT': 0, 'QA': 0}
    if env == 'DEVELOPMENT':
        version_env_counts[version]['DEVELOPMENT'] += 1
    elif env == 'QA':
        version_env_counts[version]['QA'] += 1

# Prepare data for the new columns in Final.xlsx (without date in header)
new_data = []
for version, counts in version_env_counts.items():
    total = counts['DEVELOPMENT'] + counts['QA']
    new_data.append({
        'AGENT VERSIONS': version,
        'DEVELOPMENT': counts['DEVELOPMENT'],
        'QA': counts['QA'],
        'TOTAL SERVERS': total
    })

# Create a DataFrame for the new data
new_df = pd.DataFrame(new_data)

# Load existing Final.xlsx if it exists, else create a new DataFrame
excel_file = 'final.xlsx'
if os.path.exists(excel_file):
    existing_df = pd.read_excel(excel_file, header=[0, 1])  # Read with multi-index for dates
    
    # Extract existing dates from the header
    existing_dates = [col[0] for col in existing_df.columns if col[0] != 'AGENT VERSIONS']
    existing_dates = list(dict.fromkeys(existing_dates))  # Remove duplicates, preserve order
    
    # Remove current date's columns if they exist
    if date_str in existing_dates:
        existing_dates.remove(date_str)
        existing_df = existing_df.drop(columns=[(date_str, 'DEVELOPMENT'), (date_str, 'QA'), (date_str, 'TOTAL SERVERS')])
    
    # Add the new date to the list
    existing_dates.append(date_str)
    
    # Rename new_df columns with the date as the first level
    new_df.columns = pd.MultiIndex.from_tuples(
        [('AGENT VERSIONS', ''), (date_str, 'DEVELOPMENT'), (date_str, 'QA'), (date_str, 'TOTAL SERVERS')]
    )
    
    # Merge with existing DataFrame
    if ('AGENT VERSIONS', '') in existing_df.columns:
        combined_df = existing_df.merge(new_df, on=('AGENT VERSIONS', ''), how='outer')
    else:
        combined_df = new_df
else:
    existing_dates = [date_str]
    new_df.columns = pd.MultiIndex.from_tuples(
        [('AGENT VERSIONS', ''), (date_str, 'DEVELOPMENT'), (date_str, 'QA'), (date_str, 'TOTAL SERVERS')]
    )
    combined_df = new_df

# Fill NaN values with 0 for numerical columns
for col in combined_df.columns:
    if col[0] != 'AGENT VERSIONS':
        combined_df[col] = combined_df[col].fillna(0).astype(int)

# Sort by AGENT VERSIONS
combined_df = combined_df.sort_values(('AGENT VERSIONS', ''))

# Add a TOTAL row
total_row = {('AGENT VERSIONS', ''): 'TOTAL'}
for col in combined_df.columns:
    if col[0] != 'AGENT VERSIONS':
        total_row[col] = combined_df[col].sum()
total_df = pd.DataFrame([total_row], columns=combined_df.columns)

# Append the TOTAL row
combined_df = pd.concat([combined_df, total_df], ignore_index=True)

# Save to Excel with pandas first
combined_df.to_excel(excel_file, index=False)

# Step 3: Apply formatting using openpyxl
wb = load_workbook(excel_file)
ws = wb.active

# Define styles
border = Border(
    left=Side(style='thin'), right=Side(style='thin'),
    top=Side(style='thin'), bottom=Side(style='thin')
)
center_align = Alignment(horizontal='center', vertical='center')
bold_font = Font(bold=True)

# Insert a new row at the top (row 1) for dates
ws.insert_rows(1)

# Assign dates to the correct columns (B:D for first date, E:G for second, etc.)
for idx, date in enumerate(existing_dates, start=1):
    # Calculate the starting column (B=2, E=5, H=8, etc.)
    start_col = 2 + (idx - 1) * 3
    # Merge cells for the date (e.g., B1:D1 for first date)
    ws.merge_cells(start_row=1, start_column=start_col, end_row=1, end_column=start_col+2)
    # Set the date value
    cell = ws.cell(row=1, column=start_col)
    cell.value = date
    cell.alignment = center_align
    cell.font = bold_font
    # Apply border to the merged cell
    for col in range(start_col, start_col+3):
        ws.cell(row=1, column=col).border = border

# Apply formatting to all cells: borders and center alignment
for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=ws.max_column):
    for cell in row:
        cell.border = border
        cell.alignment = center_align

# Save the formatted Excel file
wb.save(excel_file)
print(f"Aggregated data for {date_str} successfully saved to {excel_file} with formatting")