# Save this file as script.pyw
import requests
import pandas as pd
from datetime import datetime
import os
from openpyxl import load_workbook
from openpyxl.styles import Alignment, Border, Side, Font, PatternFill
import tkinter as tk
from tkinter import ttk, messagebox
import threading

# GUI Class
class App:
    def __init__(self, root):
        self.root = root
        self.root.title("Server Data Processor")
        self.root.geometry("600x400")  # Smaller window since no table display

        # Frame for button, loading, and progress
        self.top_frame = ttk.Frame(self.root)
        self.top_frame.pack(pady=10)

        # Run button
        self.run_button = ttk.Button(self.top_frame, text="Run Script", command=self.start_script)
        self.run_button.pack(side=tk.LEFT, padx=5)

        # Loading label (for animation)
        self.loading_label = ttk.Label(self.top_frame, text="")
        self.loading_label.pack(side=tk.LEFT, padx=10)

        # Progress bar
        self.progress = ttk.Progressbar(self.top_frame, length=300, mode='determinate')
        self.progress.pack(side=tk.LEFT, padx=5)

        # Text area for console logs
        self.log_frame = ttk.Frame(self.root)
        self.log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        self.log_text = tk.Text(self.log_frame, height=15, width=70, state='disabled')
        self.log_text.pack(fill=tk.BOTH, expand=True)

        # Scrollbar for log text
        scrollbar = ttk.Scrollbar(self.log_frame, orient=tk.VERTICAL, command=self.log_text.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.log_text['yscrollcommand'] = scrollbar.set

    def log(self, message):
        # Add message to the log text area
        self.log_text.configure(state='normal')
        self.log_text.insert(tk.END, f"{datetime.now().strftime('%H:%M:%S')}: {message}\n")
        self.log_text.configure(state='disabled')
        self.log_text.see(tk.END)  # Auto-scroll to the latest log
        self.root.update()

    def start_script(self):
        # Disable the button to prevent multiple clicks
        self.run_button.config(state='disabled')
        self.loading_label.config(text="Loading")
        
        # Start loading animation
        self.animate_loading()

        # Start the script in a separate thread to keep GUI responsive
        threading.Thread(target=self.run_script_thread, daemon=True).start()

    def animate_loading(self):
        # Simple loading animation with dots
        def update_dots():
            if self.loading_label.cget("text").startswith("Loading"):
                dots = self.loading_label.cget("text")[7:]
                if dots == "...":
                    self.loading_label.config(text="Loading")
                else:
                    self.loading_label.config(text="Loading" + dots + ".")
                self.root.after(500, update_dots)
        self.root.after(500, update_dots)

    def run_script_thread(self):
        # Update progress bar and log
        self.progress['value'] = 0
        self.log("Starting script execution...")
        self.root.update()

        # Step 1: Fetch data (40% progress)
        self.log("Fetching data from API...")
        self.progress['value'] = 10
        self.root.update()
        all_servers = self.fetch_data()
        self.progress['value'] = 40
        self.root.update()

        # Step 2: Generate Data.xlsx (20% progress)
        self.log("Generating Data.xlsx...")
        self.generate_data_xlsx(all_servers)
        self.progress['value'] = 60
        self.root.update()

        # Step 3: Generate and format Final.xlsx (30% progress)
        self.log("Generating and formatting Final.xlsx...")
        self.generate_final_xlsx(all_servers)
        self.progress['value'] = 90
        self.root.update()

        # Step 4: Finalize (10% progress)
        self.log("Finalizing...")
        self.progress['value'] = 100
        self.root.update()

        # Stop loading animation and re-enable button
        self.loading_label.config(text="")
        self.run_button.config(state='normal')

        # Show final prompt
        self.log("Script execution completed.")
        messagebox.showinfo("Success", "Final Excel data is ready to view in Final.xlsx.")

    def fetch_data(self):
        contrast_token = 'dhdjdjdjdjrjrjrjdj=='
        OrgUUid = 'gshdhdhd'
        App_Ids = ['hdj-jdjdjd-7888-jdjdjdj', 'hdjdjdjd', 'dhdjdkdkd']
        api_key = 'hhjkkjdddjdkdk'

        contrast_headers = {
            'Authorization': contrast_token,
            'Api-key': api_key,
            'Accept': 'application/json'
        }

        base_url = 'https://contrast.crm.com/Contrast/api/ng/'
        all_servers = []
        for app_id in App_Ids:
            url = f"{base_url}{OrgUUid}/applications/{app_id}/servers"
            try:
                response = requests.get(url, headers=contrast_headers)
                if response.status_code == 200:
                    data = response.json()
                    servers = data.get('servers', [])
                    for server in servers:
                        row = {
                            'app_id': app_id,
                            'environment': server.get('environment', '').upper(),
                            'status': server.get('status', ''),
                            'server_id': server.get('server_id', ''),
                            'name': server.get('name', ''),
                            'agent_version': server.get('agent_version', '')
                        }
                        all_servers.append(row)
                else:
                    self.log(f"Error for App ID {app_id}: {response.status_code} - {response.text}")
            except Exception as e:
                self.log(f"Exception during API call: {e}")
        return all_servers

    def generate_data_xlsx(self, all_servers):
        raw_df = pd.DataFrame(all_servers)
        raw_df = raw_df[['app_id', 'environment', 'status', 'server_id', 'name', 'agent_version']]
        raw_df.to_excel('Data.xlsx', index=False)

    def generate_final_xlsx(self, all_servers):
        current_date = datetime.now()
        date_str = current_date.strftime('%d-%b-%y').upper()

        # Step 2: Process data for Final.xlsx
        version_env_counts = {}
        for server in all_servers:
            version = server['agent_version']
            env = server['environment']
            if version not in version_env_counts:
                version_env_counts[version] = {'DEVELOPMENT': 0, 'QA': 0}
            if env == 'DEVELOPMENT':
                version_env_counts[version]['DEVELOPMENT'] += 1
            elif env == 'QA':
                version_env_counts[version]['QA'] += 1

        new_data = []
        for version, counts in version_env_counts.items():
            total = counts['DEVELOPMENT'] + counts['QA']
            new_data.append({
                'AGENT VERSIONS': version,
                'DEVELOPMENT': counts['DEVELOPMENT'],
                'QA': counts['QA'],
                'TOTAL SERVERS': total
            })

        new_df = pd.DataFrame(new_data)
        excel_file = 'final.xlsx'
        existing_dates = []
        if os.path.exists(excel_file):
            existing_df = pd.read_excel(excel_file, skiprows=1)
            with pd.ExcelFile(excel_file) as xls:
                temp_df = pd.read_excel(xls, nrows=0)
                ws = load_workbook(excel_file).active
                date_row = [cell.value for cell in ws[1] if cell.value]
                existing_dates = list(dict.fromkeys(date_row))

            if not existing_df.empty and existing_df.iloc[-1]['AGENT VERSIONS'] == 'TOTAL':
                existing_df = existing_df.iloc[:-1]

            if date_str in existing_dates:
                date_idx = existing_dates.index(date_str)
                start_col = 1 + date_idx * 3 + 1
                cols_to_drop = existing_df.columns[start_col-1:start_col+2]
                existing_df = existing_df.drop(columns=cols_to_drop)
                existing_dates.pop(date_idx)

            existing_dates.append(date_str)

            if 'AGENT VERSIONS' in existing_df.columns:
                all_versions = pd.concat([existing_df[['AGENT VERSIONS']], new_df[['AGENT VERSIONS']]], ignore_index=True)
                all_versions = all_versions['AGENT VERSIONS'].drop_duplicates().to_list()
                existing_df = existing_df.set_index('AGENT VERSIONS').reindex(all_versions).reset_index()
                new_df = new_df.set_index('AGENT VERSIONS').reindex(all_versions).reset_index()
                existing_df = existing_df.fillna(0)
                for col in existing_df.columns:
                    if col != 'AGENT VERSIONS':
                        existing_df[col] = existing_df[col].astype(int)
                combined_df = existing_df.merge(new_df, on='AGENT VERSIONS', how='outer')
            else:
                combined_df = new_df
        else:
            existing_dates = [date_str]
            combined_df = new_df

        combined_df = combined_df.fillna(0)
        for col in combined_df.columns:
            if col != 'AGENT VERSIONS':
                combined_df[col] = combined_df[col].astype(int)

        combined_df = combined_df.sort_values('AGENT VERSIONS')
        total_row = {'AGENT VERSIONS': 'TOTAL'}
        for col in combined_df.columns:
            if col != 'AGENT VERSIONS':
                total_row[col] = combined_df[col].sum()
        total_df = pd.DataFrame([total_row])
        combined_df = pd.concat([combined_df, total_df], ignore_index=True)

        flat_columns = ['AGENT VERSIONS']
        for date in existing_dates:
            flat_columns.extend(['DEVELOPMENT', 'QA', 'TOTAL SERVERS'])
        combined_df.columns = flat_columns

        combined_df.to_excel(excel_file, index=False)

        # Step 3: Apply formatting
        wb = load_workbook(excel_file)
        ws = wb.active

        thin_border = Border(
            left=Side(style='thin'), right=Side(style='thin'),
            top=Side(style='thin'), bottom=Side(style='thin')
        )
        bold_left = Border(left=Side(style='medium'), right=Side(style='thin'), top=Side(style='thin'), bottom=Side(style='thin'))
        bold_right = Border(left=Side(style='thin'), right=Side(style='medium'), top=Side(style='thin'), bottom=Side(style='thin'))
        bold_top = Border(left=Side(style='thin'), right=Side(style='thin'), top=Side(style='medium'), bottom=Side(style='thin'))
        bold_bottom = Border(left=Side(style='thin'), right=Side(style='thin'), top=Side(style='thin'), bottom=Side(style='medium'))
        bold_top_left = Border(left=Side(style='medium'), right=Side(style='thin'), top=Side(style='medium'), bottom=Side(style='thin'))
        bold_top_right = Border(left=Side(style='thin'), right=Side(style='medium'), top=Side(style='medium'), bottom=Side(style='thin'))
        bold_bottom_left = Border(left=Side(style='medium'), right=Side(style='thin'), top=Side(style='thin'), bottom=Side(style='medium'))
        bold_bottom_right = Border(left=Side(style='thin'), right=Side(style='medium'), top=Side(style='thin'), bottom=Side(style='medium'))

        center_align = Alignment(horizontal='center', vertical='center')
        left_align = Alignment(horizontal='left', vertical='center')
        bold_font = Font(bold=True)
        green_fill = PatternFill(start_color='00FF00', end_color='00FF00', fill_type='solid')

        ws.insert_rows(1)
        for idx, date in enumerate(existing_dates, start=1):
            start_col = 2 + (idx - 1) * 3
            end_col = start_col + 2
            ws.merge_cells(start_row=1, start_column=start_col, end_row=1, end_column=end_col)
            cell = ws.cell(row=1, column=start_col)
            cell.value = date
            cell.alignment = center_align
            cell.font = bold_font
            for col in range(start_col, end_col + 1):
                if col == start_col:
                    ws.cell(row=1, column=col).border = bold_top_left
                elif col == end_col:
                    ws.cell(row=1, column=col).border = bold_top_right
                else:
                    ws.cell(row=1, column=col).border = bold_top

        for row_idx in range(1, ws.max_row + 1):
            for col_idx in range(1, ws.max_column + 1):
                cell = ws.cell(row=row_idx, column=col_idx)
                cell.border = thin_border
                if col_idx == 1:
                    cell.alignment = left_align
                else:
                    cell.alignment = center_align
                if row_idx == ws.max_row:
                    cell.font = bold_font
                if col_idx > 1 and row_idx > 2 and cell.value == 0:
                    cell.fill = green_fill
                if col_idx > 1:
                    date_idx = (col_idx - 2) // 3
                    start_col = 2 + date_idx * 3
                    end_col = start_col + 2
                    if col_idx == start_col:
                        if row_idx == 1:
                            continue
                        elif row_idx == 2:
                            cell.border = bold_top_left
                        elif row_idx == ws.max_row:
                            cell.border = bold_bottom_left
                        else:
                            cell.border = bold_left
                    elif col_idx == end_col:
                        if row_idx == 1:
                            continue
                        elif row_idx == 2:
                            cell.border = bold_top_right
                        elif row_idx == ws.max_row:
                            cell.border = bold_bottom_right
                        else:
                            cell.border = bold_right
                    if col_idx in range(start_col, end_col + 1):
                        if row_idx == 2:
                            if col_idx != start_col and col_idx != end_col:
                                cell.border = bold_top
                        elif row_idx == ws.max_row:
                            if col_idx != start_col and col_idx != end_col:
                                cell.border = bold_bottom

        wb.save(excel_file)

if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()