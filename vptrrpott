import requests
import re
import json
import pygal
from pygal.style import Style
import io
import os
from urllib.parse import urlparse

def save_html_report(report, filename):
    with io.open(filename, "w", encoding="utf-8") as file:
        file.write(report)

def get_severity_color(severity):
    if severity == "Critical":
        return "maroon"
    if severity == "High":
        return "red"
    elif severity == "Medium":
        return "orange"
    elif severity == "Low":
        return "yellow"
    elif severity == "Info":
        return "grey"
    else:
        return "transparent"

def strip_vulnerability_id(vulnerability_id):
    if vulnerability_id is None or not isinstance(vulnerability_id, dict):
        return "N/A"
    vulnerability_id = vulnerability_id.get("vulnerability_id", "").strip("{'vulnerability_id': '").rstrip("'}")
    return vulnerability_id

def download_image(img_url, api_key, local_base_path="images"):
    """Download an image from the given URL and save it locally with the appropriate folder structure."""
    try:
        headers = {
            "Authorization": f"Token {api_key}",
            "Content-Type": "application/json"
        }
        
        # Make a GET request to fetch the image
        response = requests.get(img_url, headers=headers, stream=True)
        
        if response.status_code == 200:
            # Parse the URL to extract the path components
            parsed_url = urlparse(img_url)
            path_parts = parsed_url.path.split('/')
            
            # Construct the local path based on the URL structure
            # Assuming URL is like: https://demo.defectdojo.org/access_file/4901/31280/Finding
            if len(path_parts) >= 4:
                folder_structure = os.path.join(local_base_path, *path_parts[1:-1])  # e.g., images/access_file/4901/31280/Finding
                os.makedirs(folder_structure, exist_ok=True)
                
                # Extract the filename from the last part of the URL or set a default
                filename = path_parts[-1] if path_parts[-1] else "image.png"
                if not filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif')):
                    filename = "image.png"  # Default to .png if no valid extension
                
                local_path = os.path.join(folder_structure, filename)
                
                # Save the image
                with open(local_path, 'wb') as f:
                    for chunk in response.iter_content(1024):
                        f.write(chunk)
                
                # Return the relative path for use in the HTML report
                return local_path
            else:
                print(f"Invalid URL structure for image: {img_url}")
                return img_url  # Fallback to original URL if structure is unexpected
        else:
            print(f"Failed to download image from {img_url}. Status code: {response.status_code}")
            return img_url  # Fallback to original URL if download fails
    except Exception as e:
        print(f"Error downloading image from {img_url}: {str(e)}")
        return img_url  # Fallback to original URL if an error occurs

def generate_html_report(finding_data, report_name, start_date, end_date, prepared_by, reviewed_by, approved_by, api_key):
    # Sorted findings
    sorted_findings = sorted(finding_data, key=lambda x: ["Critical", "High", "Medium", "Low", "Info"].index(x["severity"]))
    
    # Count the occurrences of each severity
    severity_counts = {}
    for finding in sorted_findings:
        severity = finding["severity"]
        severity_counts[severity] = severity_counts.get(severity, 0) + 1
    
    # Generate the HTML report
    html_report = f"""
    <!DOCTYPE html>
    <html>
    <head>
      <title>DefectDojo Findings Report</title>
      <style>
        body {{
          border: 1px solid #ccc;
          padding: 10px;
          font-size: 16px;
        }}
        h1 {{
          font-size: 18px;
          font-weight: bold;
        }}
        .report-heading {{
          font-size: 34px;
          font-weight: bold;
        }}
        .finding-title {{
          background-color: rgba(32, 166, 216, 0.75) !important;
          color: white;
          padding: 10px;
          margin-top: 20px;
        }}
        .severity-box {{
          display: inline-block;
          padding: 5px;
          margin-bottom: 10px;
          color: white;
        }}
        .severity-high {{
          background-color: red;
        }}
        .severity-medium {{
          background-color: orange;
        }}
        .severity-low {{
          background-color: yellow;
        }}
        .severity-info {{
          background-color: grey;
        }}
        .hardcoded-line {{
          border-top: 1px solid #000;
          margin-top: 1px;
          padding-top: 1px;
          border-width: 1px;
        }}
        .step-image {{
          border: 1px solid #ccc;
          padding: 5px;
          margin-bottom: 10px;
        }}
        .steps_to_reproduce {{
          list-style-type: none;
          padding-left: 0;
        }}
        table {{
          border-collapse: collapse;
          width: 100%;
        }}
        th, td {{
          padding: 8px;
          text-align: left;
          border-bottom: 1px solid #ddd;
        }}
        .Sub-Title {{
          font-size: 24px;
        }}
      </style>
    </head>
    <body>
    <div class="cover-page">
      <img src="logo">
      <h2 class="report-heading">{report_name}</h2>
      <h1>Application Security<h1>
      <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
      <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
      <div class="Sub-Title">
        <p><strong>Report Properties:</strong></p>
        <p><strong>VAPT Dates:</strong></p>
      </div>
      <table>
        <tr>
          <th>Start Date: </th><td>{start_date}</td>
        </tr>
        <tr>
          <th>End Date : </th><td>{end_date}</td> 
        </tr>      
        <tr>
          <th>Report Prepared by: </th><td>{prepared_by}</td>
        </tr>
        <tr>
          <th>Reviewed by: </th><td>{reviewed_by}</td>
        </tr>
        <tr>
          <th>Approved by: </th><td>{approved_by}</td>
        </tr>
      </table>
    </div>
    <br><br><br><br><br><br>
    """

    # Count the findings by severity
    severity_counts = {"Critical": 0, "High": 0, "Medium": 0, "Low": 0, "Info": 0}
    for finding in sorted_findings:
        severity = finding["severity"]
        severity_counts[severity] += 1
    
    custom_style = Style(value_font_size=4)
    # Generate the pie chart
    pie_chart = pygal.Pie(width=400, height=200, print_values=True, style=custom_style, value_formatter=lambda x: f"({(x * 100 / sum(severity_counts.values())):.2f}%)")
    pie_chart.title = "Findings by Severity"
    for severity, count in severity_counts.items():
        pie_chart.add(f"{severity}, ({count})", count)
    
    chart_svg = pie_chart.render()
    chart_svg = chart_svg.replace(b'\n', b' ')
    chart_svg_str = chart_svg.decode("utf-8")
    chart_svg_str = chart_svg_str.replace("b' '", "")
    
    # Append the chart SVG to the HTML report
    html_report += f'<div>{chart_svg_str}</div>'
    
    severity_findings = {}
    severity_colors = {
        "Critical": {"background": "maroon", "font": "black"},
        "High": {"background": "red", "font": "black"},
        "Medium": {"background": "orange", "font": "black"},
        "Low": {"background": "yellow", "font": "black"},
        "Info": {"background": "grey", "font": "black"}
    }
    
    for finding in sorted_findings:
        severity = finding["severity"]
        if severity not in severity_findings:
            severity_findings revascular: []
        severity_findings[severity].append(finding)

    # Index page with a list of all findings
    html_report += "<h2 id='top'>Findings Index</h2>"
    severity_order = ["Critical", "High", "Medium", "Low", "Info"]
    for severity in severity_order:
        findings = severity_findings.get(severity, [])
        if findings:
            color = severity_colors.get(severity, {})
            background_color = color.get("background", "white")
            font_color = color.get("font", "black")
            html_report += f"<h1 style='background-color: {background_color}; color: {font_color}'>{severity} Findings:</h1>"
            html_report += "<ul>"
            for i, finding in enumerate(findings, start=1):
                finding_title = finding["title"]
                html_report += f'<li><a href="#finding{i}">Finding {i}: {finding_title}</a></li>'
            html_report += "</ul>"
    
    html_report += "<br><br><br>"
    html_report += "<p><h2 id='top'>Findings Details</h2><p>"
    
    for i, finding in enumerate(sorted_findings, start=1):
        finding_title = finding["title"]
        vulnerability_id = finding["vulnerability_ids"][0] if finding["vulnerability_ids"] else "N/A"
        vulnerability_id = strip_vulnerability_id(vulnerability_id)
        description = finding["description"].replace("\r\n", "<br>")
        cvssv3 = finding["cvssv3"]
        cvssv3_score = finding["cvssv3_score"]
        severity = finding["severity"]
        steps_to_reproduce = finding["steps_to_reproduce"].replace("\r\n", "<br>")
        mitigation = finding["mitigation"].replace("\r\n", "<br>")
        impact = finding["impact"].replace("\r\n", "<br>")
        
        html_report += f"""
        <br><br><br>
        <div id="finding{i}" class="finding-border">
          <div class="finding-title">
            <h1 id="finding{i}">Finding {i}: {finding_title}</h1></div>
        </div>
        <p><strong>Jira ID:</strong> {vulnerability_id}</p>
        <hr class="hardcoded-line">
        <p><strong>Description:</strong> {description}</p>
        <hr class="hardcoded-line">
        <p><strong>CVSSv3:</strong> {cvssv3}</p>
        <hr class="hardcoded-line">
        <p><strong>CVSSv3 Score:</strong> {cvssv3_score}</p>
        <hr class="hardcoded-line">
        <div class="severity-box severity-{severity.lower()}" style="background-color: {get_severity_color(severity)};">
          <strong>Severity:</strong> {severity}
        </div>
        <hr class="hardcoded-line">
        <p><strong>Impact:</strong></p> {impact}</p>
        <hr class="hardcoded-line">
        <p><strong>Mitigation:</strong></p> {mitigation}</p>
        <hr class="hardcoded-line">
        <p><strong>Steps to Reproduce:</strong></p>
        <ul class="steps_to_reproduce">
        """
        
        # Parse steps_to_reproduce and handle images
        for step in steps_to_reproduce.split("<br>"):
            img_regex = r"!\[\]\((https?://[^\s]+)\)"
            img_urls = re.findall(img_regex, step)
            for img_url in img_urls:
                # Download the image and get the local path
                local_img_path = download_image(img_url, api_key)
                # Replace the remote URL with the local path in the step
                step = step.replace(f"![]({img_url})", f'<img class="step-image" src="{local_img_path}" style="max-width: 1000px; max-height: 800px;"><br>')
            
            html_report += f"<li>{step}</li>"
        
        html_report += "</ul><hr></div>"
    
    html_report += """
    <div class="cover-page-bottom"></div>
    </body>
    </html>
    """
    
    return html_report

# Prompt the user for inputs
test_ids = input("Enter the Test IDs (comma-separated): ").split(",")
report_name = input("Enter Report Name: ")
start_date = input("Enter Start Date: ")
end_date = input("Enter End Date: ")
prepared_by = input("Enter name of prepared by person: ")
reviewed_by = input("Enter name of reviewed by person: ")
approved_by = input("Enter name of approved by person: ")

# DefectDojo API endpoint
api_url = "https://demo.defectdojo.org/api/v2/tests/{}/generate_report/"

# Set your authentication API key
api_key = "abc"

# Set the headers
headers = {
    "Authorization": f"Token {api_key}",
    "Content-Type": "application/json"
}

finding_data = []

for test_id in test_ids:
    # Make a POST request to generate the report for each test ID
    response = requests.post(api_url.format(test_id.strip()), headers=headers)
    
    # Check if the request was successful
    if response.status_code == 200:
        report_data = response.json()
        findings = report_data.get("findings")
        
        if findings:
            for finding in findings:
                finding_data.append(finding)
        else:
            print(f"No findings found for Test ID: {test_id.strip()}")
        
        print("\n---\n")
    else:
        print(f"Error fetching findings for Test ID: {test_id.strip()}. Status code: {response.status_code}")

# Generate the HTML report
html_report = generate_html_report(finding_data, report_name, start_date, end_date, prepared_by, reviewed_by, approved_by, api_key)

# Save the HTML report
filename = "report.html"
save_html_report(html_report, filename)

print(f"HTML report saved as: {filename}")