import datetime
import calendar
import pandas as pd
from openpyxl import Workbook, load_workbook
from openpyxl.styles import Alignment, Font, PatternFill, Border, Side
from openpyxl.utils import get_column_letter
import os
import requests
import json

# ===== CONFIGURATION - EDIT THESE VALUES =====
JIRA_URL = "https://demo.jira.com/rest/api/2/search/"  # Your Jira API endpoint
JIRA_API_TOKEN = "hdjdjdjdjdj"  # Your Bearer token
# =============================================

def get_jira_connection():
    """Authenticate to Jira server using Bearer token"""
    headers = {
        "Authorization": f"Bearer {JIRA_API_TOKEN}",
        "Content-Type": "application/json"
    }
    return headers

def calculate_cutoff_dates():
    """Calculate SLA cutoff dates based on severity"""
    today = datetime.date.today()
    last_day = calendar.monthrange(today.year, today.month)[1]
    end_of_month = datetime.date(today.year, today.month, last_day)
    
    return {
        'Critical': end_of_month - datetime.timedelta(days=15),
        'High': end_of_month - datetime.timedelta(days=30),
        'Medium': end_of_month - datetime.timedelta(days=90),
        'Low': end_of_month - datetime.timedelta(days=365)
    }

def generate_jql(cutoff_dates):
    """Generate JQL query based on SLA cutoffs"""
    return f'''
    labels in ("sqli", "xss") 
    AND project in (cmr, dmr) 
    AND issuetype not in (epic, story) 
    AND component = "techdebt" 
    AND status not in (retrospected)
    AND (
        (severity = "Critical" AND created <= "{cutoff_dates['Critical']}")
        OR (severity = "High" AND created <= "{cutoff_dates['High']}")
        OR (severity = "Medium" AND created <= "{cutoff_dates['Medium']}")
        OR (severity = "Low" AND created <= "{cutoff_dates['Low']}")
    )
    '''.strip()

def fetch_issues(headers, jql):
    """Fetch issues from Jira using the REST API with specific fields"""
    params = {
        "jql": jql,
        "maxResults": 1000,
        "fields": "project,key,status"
    }
    response = requests.get(JIRA_URL, headers=headers, params=params)
    
    if response.status_code != 200:
        raise Exception(f"Failed to fetch issues: {response.status_code} - {response.text}")
    
    data = response.json()
    return data.get('issues', [])

def save_to_data_excel(issues):
    """Save raw issue data to Data.xlsx"""
    filename = "Data.xlsx"
    sheet_name = "Issues"
    
    raw_issues = []
    print(f"\nProcessing {len(issues)} issues for Data.xlsx...")
    for issue in issues:
        try:
            project = issue.get('fields', {}).get('project', {}).get('key', '').upper()
            key = issue.get('key', '')
            status = issue.get('fields', {}).get('status', {}).get('name', '')
            raw_issues.append([project, key, status])
            print(f"Issue {key}: Project={project}, Status={status}")
        except Exception as e:
            print(f"Error processing issue {issue.get('key', 'unknown')}: {str(e)}")
    
    df = pd.DataFrame(raw_issues, columns=["Project", "Key", "Status"])
    with pd.ExcelWriter(filename, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)
    
    wb = load_workbook(filename)
    ws = wb[sheet_name]
    
    header_fill = PatternFill(start_color="D9E1F2", end_color="D9E1F2", fill_type="solid")
    header_font = Font(bold=True)
    for cell in ws[1]:
        cell.fill = header_fill
        cell.font = header_font
        cell.alignment = Alignment(horizontal="center", vertical="center")
    
    for row in ws.iter_rows(min_row=1, max_row=ws.max_row, min_col=1, max_col=ws.max_column):
        for cell in row:
            cell.alignment = Alignment(horizontal="center", vertical="center")
    
    for col_idx in range(1, ws.max_column + 1):
        max_length = 0
        col_letter = get_column_letter(col_idx)
        for cell in ws[col_letter]:
            try:
                if cell.value and len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        adjusted_width = max_length + 2
        ws.column_dimensions[col_letter].width = adjusted_width
    
    wb.save(filename)
    print(f"\nRaw data saved to {filename}")

def process_issues_from_excel():
    """Process issues from Data.xlsx into counts"""
    filename = "Data.xlsx"
    sheet_name = "Issues"
    
    if not os.path.exists(filename):
        raise Exception(f"{filename} not found")
    
    df = pd.read_excel(filename, sheet_name=sheet_name)
    counts = {
        'customer management': 0,
        'deputy managing': 0
    }
    
    print(f"\nProcessing {len(df)} issues from {filename}...")
    for _, row in df.iterrows():
        try:
            project = str(row['Project']).lower().strip()
            key = row['Key']
            
            # Map project keys to full names
            if project == 'cmr':
                project = 'customer management'
            elif project == 'dmr':
                project = 'deputy managing'
            else:
                print(f"Skipped issue {key}: Invalid project ({project})")
                continue
            
            print(f"Issue {key}: Project={project}")
            counts[project] += 1
        except Exception as e:
            print(f"Error processing issue {row.get('Key', 'unknown')}: {str(e)}")
    
    print("\nFinal counts:")
    print(json.dumps(counts, indent=2))
    return counts

def update_sla_report(today_str, counts):
    """Update sla_report.xlsx with counts"""
    filename = "sla_report.xlsx"
    sheet_name = "SLA Report"
    
    if not os.path.exists(filename):
        wb = Workbook()
        ws = wb.active
        ws.title = sheet_name
        ws.append(["Project"])
        wb.save(filename)
    
    wb = load_workbook(filename)
    if sheet_name in wb.sheetnames:
        ws = wb[sheet_name]
    else:
        ws = wb.create_sheet(sheet_name)
        ws.append(["Project"])
    
    header_row = 1
    max_col = ws.max_column
    
    date_exists = False
    date_col = None
    for col in range(1, max_col + 1):
        if ws.cell(header_row, col).value == today_str:
            date_exists = True
            date_col = col
            break
    
    if not date_exists:
        date_col = max_col + 1
        ws.cell(header_row, date_col, today_str)
        
        header_fill = PatternFill(start_color="D9E1F2", end_color="D9E1F2", fill_type="solid")
        header_font = Font(bold=True)
        border = Border(left=Side(style='medium'), right=Side(style='medium'))
        
        cell = ws.cell(header_row, date_col)
        cell.fill = header_fill
        cell.font = header_font
        cell.alignment = Alignment(horizontal="center", vertical="center")
        cell.border = border
    
    projects = {}
    for row in range(3, ws.max_row + 1):
        project_cell = ws.cell(row, 1)
        if project_cell.value:
            project_key = project_cell.value.lower()
            if project_key in ["customer management", "deputy managing"]:
                projects[project_key] = row
    
    for project in ["customer management", "deputy managing"]:
        if project not in projects:
            new_row = ws.max_row + 1
            ws.cell(new_row, 1, project.title())
            projects[project] = new_row
    
    zero_fill = PatternFill(start_color="90EE90", end_color="90EE90", fill_type="solid")
    for project, row_idx in projects.items():
        count = counts.get(project, 0)
        print(f"Writing for {project}: Count={count}")
        
        cell = ws.cell(row_idx, date_col)
        cell.value = count if count > 0 else ""
        cell.alignment = Alignment(horizontal="center", vertical="center")
        cell.border = Border(left=Side(style='medium'), right=Side(style='medium'))
        if count == 0:
            cell.fill = zero_fill
    
    total_row = None
    for row in range(3, ws.max_row + 1):
        if ws.cell(row, 1).value == "Total":
            total_row = row
            break
    
    if not total_row:
        total_row = ws.max_row + 1
        ws.cell(total_row, 1, "Total")
        ws.cell(total_row, 1).font = Font(bold=True)
    
    for col in range(2, ws.max_column + 1):
        col_sum = 0
        for row in range(3, total_row):
            value = ws.cell(row, col).value
            if isinstance(value, (int, float)):
                col_sum += value
        cell = ws.cell(total_row, col)
        cell.value = col_sum if col_sum > 0 else ""
        cell.font = Font(bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center")
        cell.border = Border(left=Side(style='medium'), right=Side(style='medium'))
        if col_sum == 0:
            cell.fill = zero_fill
    
    for row in ws.iter_rows(min_row=1, max_row=ws.max_row, min_col=1, max_col=ws.max_column):
        for cell in row:
            cell.alignment = Alignment(horizontal="center", vertical="center")
    
    for col_idx in range(1, ws.max_column + 1):
        max_length = 0
        col_letter = get_column_letter(col_idx)
        for cell in ws[col_letter]:
            try:
                if cell.value and len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        adjusted_width = max_length + 2
        ws.column_dimensions[col_letter].width = adjusted_width
    
    wb.save(filename)
    print(f"\nSLA report updated: {filename}")

def main():
    print(f"Starting SLA report generation for {datetime.date.today().strftime('%d-%b-%Y')} at 09:10 PM IST")
    
    try:
        print("Preparing Jira API connection...")
        headers = get_jira_connection()
        print("Connection headers prepared successfully")
        
        cutoff_dates = calculate_cutoff_dates()
        
        jql = generate_jql(cutoff_dates)
        print("\nGenerated JQL:\n")
        print(jql)
        
        with open("sla_query.txt", "w") as f:
            f.write(jql)
        print("\nJQL saved to sla_query.txt")
        
        print("\nFetching issues from Jira...")
        issues = fetch_issues(headers, jql)
        print(f"Found {len(issues)} issues matching criteria")
        
        save_to_data_excel(issues)
        counts = process_issues_from_excel()
        
        today_str = datetime.date.today().strftime("%d-%b-%Y")
        update_sla_report(today_str, counts)
        
        print("\nReport generation completed successfully")
        
    except Exception as e:
        print(f"\nError occurred: {str(e)}")
        import traceback
        print(traceback.format_exc())

if __name__ == "__main__":
    main()