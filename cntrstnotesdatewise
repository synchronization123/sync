# Save this file as contrast_traces.py
import requests
import pandas as pd
from datetime import datetime, timedelta
import os
import tkinter as tk
from tkinter import ttk, messagebox
import threading
from concurrent.futures import ThreadPoolExecutor
from openpyxl import load_workbook
from openpyxl.styles import Border, Side, Alignment, Font
from tkcalendar import DateEntry  # Requires tkcalendar: pip install tkcalendar

# Set the working directory to the script's directory
script_dir = os.path.dirname(os.path.abspath(__file__))
os.chdir(script_dir)

# GUI Class
class App:
    def __init__(self, root):
        self.root = root
        self.root.title("Contrast Traces Processor")
        self.root.geometry("600x500")

        # Frame for date inputs
        self.date_frame = ttk.Frame(self.root)
        self.date_frame.pack(pady=10)

        # Start date picker
        ttk.Label(self.date_frame, text="Start Date:").grid(row=0, column=0, padx=5, pady=5, sticky="w")
        self.start_date_entry = DateEntry(
            self.date_frame,
            width=12,
            background='darkblue',
            foreground='white',
            borderwidth=2,
            year=2025,
            month=1,
            day=1,
            date_pattern='yyyy-mm-dd'
        )
        self.start_date_entry.grid(row=0, column=1, padx=5, pady=5)

        # End date picker
        ttk.Label(self.date_frame, text="End Date:").grid(row=1, column=0, padx=5, pady=5, sticky="w")
        self.end_date_entry = DateEntry(
            self.date_frame,
            width=12,
            background='darkblue',
            foreground='white',
            borderwidth=2,
            year=datetime.now().year,
            month=datetime.now().month,
            day=datetime.now().day,
            date_pattern='yyyy-mm-dd'
        )
        self.end_date_entry.grid(row=1, column=1, padx=5, pady=5)

        # Frame for button, loading, and progress
        self.top_frame = ttk.Frame(self.root)
        self.top_frame.pack(pady=10)

        # Run button
        self.run_button = ttk.Button(self.top_frame, text="Run Script", command=self.start_script)
        self.run_button.pack(side=tk.LEFT, padx=5)

        # Loading label
        self.loading_label = ttk.Label(self.top_frame, text="")
        self.loading_label.pack(side=tk.LEFT, padx=10)

        # Progress bar
        self.progress = ttk.Progressbar(self.top_frame, length=300, mode='determinate')
        self.progress.pack(side=tk.LEFT, padx=5)

        # Text area for console logs
        self.log_frame = ttk.Frame(self.root)
        self.log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        self.log_text = tk.Text(self.log_frame, height=15, width=70, state='disabled')
        self.log_text.pack(fill=tk.BOTH, expand=True)

        # Scrollbar for log text
        scrollbar = ttk.Scrollbar(self.log_frame, orient=tk.VERTICAL, command=self.log_text.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.log_text['yscrollcommand'] = scrollbar.set

    def log(self, message):
        self.log_text.configure(state='normal')
        self.log_text.insert(tk.END, f"{datetime.now().strftime('%H:%M:%S')}: {message}\n")
        self.log_text.configure(state='disabled')
        self.log_text.see(tk.END)

    def validate_dates(self):
        try:
            start_date = self.start_date_entry.get_date()
            end_date = self.end_date_entry.get_date()
            # Convert to datetime and set time to midnight
            start_date = datetime.combine(start_date, datetime.min.time())
            end_date = datetime.combine(end_date, datetime.max.time())
            if start_date > end_date:
                raise ValueError("Start date cannot be after end date.")
            return start_date, end_date
        except ValueError as e:
            self.log(f"Date validation error: {e}")
            messagebox.showerror("Error", f"Invalid date selection: {e}")
            return None, None

    def start_script(self):
        start_date, end_date = self.validate_dates()
        if start_date is None or end_date is None:
            self.run_button.config(state='normal')
            return

        self.run_button.config(state='disabled')
        self.loading_label.config(text="Loading")
        self.animate_loading()
        threading.Thread(target=self.run_script_thread, args=(start_date, end_date), daemon=True).start()

    def animate_loading(self):
        def update_dots():
            if self.loading_label.cget("text").startswith("Loading"):
                dots = self.loading_label.cget("text")[7:]
                if dots == "...":
                    self.loading_label.config(text="Loading")
                else:
                    self.loading_label.config(text="Loading" + dots + ".")
                self.root.after(1000, update_dots)
        self.root.after(1000, update_dots)

    def run_script_thread(self, start_date, end_date):
        self.progress['value'] = 0
        self.log("Starting script execution...")

        # Convert dates to epoch milliseconds
        start_epoch = int(start_date.timestamp() * 1000)
        end_epoch = int(end_date.timestamp() * 1000)
        self.log(f"Filtering notes between {start_date.strftime('%Y-%m-%d')} and {end_date.strftime('%Y-%m-%d')} (Epoch: {start_epoch} to {end_epoch})")

        # Step 1: Fetch applications (33% progress)
        self.log("Fetching applications data...")
        self.progress['value'] = 10
        applications = self.fetch_applications()
        self.progress['value'] = 33

        # Step 2: Fetch traces (33% progress)
        self.log("Fetching traces data...")
        traces = self.fetch_traces(applications)
        self.progress['value'] = 66

        # Step 3: Fetch notes and generate Final.xlsx (34% progress)
        self.log("Fetching notes and generating Final.xlsx...")
        self.generate_final_xlsx(traces, start_epoch, end_epoch)
        self.progress['value'] = 100

        # Finalize
        self.loading_label.config(text="")
        self.run_button.config(state='normal')
        self.log("Script execution completed.")
        self.root.after(0, lambda: messagebox.showinfo("Success", "Final Excel data is ready in Final.xlsx"))

    def fetch_applications(self):
        contrast_token = 'dhdjdjdjdjrjrjrjdj=='  # Replace with actual token
        org_uuid = 'gshdhdhd'  # Replace with actual Org UUID
        api_key = 'hhjkkjdddjdkdk'  # Replace with actual API key

        headers = {
            'Authorization': contrast_token,
            'Api-key': api_key,
            'Accept': 'application/json'
        }

        base_url = 'https://crm.contrast.com/api/ng/'
        url = f"{base_url}{org_uuid}/applications/filter"
        applications = []

        with requests.Session() as session:
            session.headers.update(headers)
            try:
                response = session.get(url, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    for app in data.get('applications', []):
                        applications.append({
                            'name': app.get('name', ''),
                            'app_id': app.get('app_id', '')
                        })
                    # Save to applications.xlsx
                    df = pd.DataFrame(applications)
                    df.to_excel(os.path.join(script_dir, 'applications.xlsx'), index=False)
                    self.log("Applications saved to applications.xlsx")
                else:
                    self.log(f"Error fetching applications: {response.status_code} - {response.text}")
            except Exception as e:
                self.log(f"Exception fetching applications: {e}")
        
        return applications

    def fetch_traces(self, applications):
        contrast_token = 'dhdjdjdjdjrjrjrjdj=='  # Replace with actual token
        org_uuid = 'gshdhdhd'  # Replace with actual Org UUID
        api_key = 'hhjkkjdddjdkdk'  # Replace with actual API key

        headers = {
            'Authorization': contrast_token,
            'Api-key': api_key,
            'Accept': 'application/json'
        }

        base_url = 'https://crm.contrast.com/api/ng/'
        traces = []
        statuses = ['Confirmed', 'Not a Problem', 'Remediated', 'Fixed', 'Suspicious']

        def fetch_traces_for_app(app):
            app_id = app['app_id']
            app_traces = []
            for status in statuses:
                # Limit to last 1000 traces per status
                url = f"{base_url}{org_uuid}/traces/{app_id}/filter?limit=1000&status={status}&sort=-last_time_seen"
                try:
                    response = session.get(url, timeout=10)
                    if response.status_code == 200:
                        data = response.json()
                        traces_fetched = data.get('traces', [])
                        self.log(f"Fetched {len(traces_fetched)} traces for App ID {app_id}, Status {status}")
                        for trace in traces_fetched[:1000]:  # Ensure no more than 1000 traces
                            app_traces.append({
                                'name': app['name'],
                                'app_id': app_id,
                                'severity': trace.get('severity', ''),
                                'uuid': trace.get('uuid', ''),
                                'rule_name': trace.get('rule_name', ''),
                                'rule_title': trace.get('rule_title', ''),
                                'current_status': trace.get('status', '')
                            })
                    else:
                        self.log(f"Error for App ID {app_id}, Status {status}: {response.status_code} - {response.text}")
                except Exception as e:
                    self.log(f"Exception for App ID {app_id}, Status {status}: {e}")
            return app_traces

        with requests.Session() as session:
            session.headers.update(headers)
            with ThreadPoolExecutor(max_workers=5) as executor:
                results = list(executor.map(fetch_traces_for_app, applications))

        for result in results:
            traces.extend(result)

        # Save to Traces.xlsx
        df = pd.DataFrame(traces)
        df.to_excel(os.path.join(script_dir, 'Traces.xlsx'), index=False)
        self.log(f"Traces saved to Traces.xlsx (Total: {len(traces)})")
        return traces

    def generate_final_xlsx(self, traces, start_epoch, end_epoch):
        contrast_token = 'dhdjdjdjdjrjrjrjdj=='  # Replace with actual token
        org_uuid = 'gshdhdhd'  # Replace with actual Org UUID
        api_key = 'hhjkkjdddjdkdk'  # Replace with actual API key

        headers = {
            'Authorization': contrast_token,
            'Api-key': api_key,
            'Accept': 'application/json'
        }

        base_url = 'https://crm.contrast.com/api/ng/'
        final_data = []
        max_notes = 0  # Track the maximum number of notes for any trace

        def fetch_notes(trace):
            nonlocal max_notes
            app_id = trace['app_id']
            trace_uuid = trace['uuid']
            url = f"{base_url}{org_uuid}/applications/{app_id}/traces/{trace_uuid}/notes"
            try:
                response = session.get(url, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    notes = data.get('notes', [])
                    # Filter notes by creation date (epoch milliseconds)
                    filtered_notes = [
                        note for note in notes
                        if start_epoch <= note.get('creation', 0) <= end_epoch
                    ]
                    if filtered_notes:  # Only process traces with notes in date range
                        trace_data = {
                            'Application Name': trace['name'],
                            'Application ID': trace['app_id'],
                            'Severity': trace['severity'],
                            'Trace ID': trace['uuid'],
                            'Rule Name': trace['rule_name'],
                            'Rule Title': trace['rule_title'],
                            'Current Trace Status': trace['current_status']
                        }
                        # Process notes and extract previous status and creator
                        for i, note in enumerate(filtered_notes, 1):
                            trace_data[f'Previous Status {i}'] = ''
                            trace_data[f'Previous Creator {i}'] = ''
                            trace_data[f'Creation Date {i}'] = datetime.fromtimestamp(note.get('creation', 0) / 1000).strftime('%Y-%m-%d %H:%M:%S')
                            trace_data[f'Current Creator {i}'] = note.get('creator', '')
                            trace_data[f'Current Creator {i} uid'] = note.get('creator_uid', '')
                            trace_data[f'Current Creator Note {i}'] = note.get('note', '')
                            # Extract previous status and creator from Properties
                            properties = note.get('properties', [])
                            for prop in properties:
                                if prop.get('name') == 'status.change.previous.status':
                                    trace_data[f'Previous Status {i}'] = prop.get('value', '')
                                if prop.get('name') == 'status.changed.creator':
                                    trace_data[f'Previous Creator {i}'] = prop.get('value', '')
                            # Add blank column placeholder
                            trace_data[f'Blank_{i}'] = ''
                        max_notes = max(max_notes, len(filtered_notes))
                        final_data.append(trace_data)
                else:
                    self.log(f"Error for Trace {trace_uuid}: {response.status_code} - {response.text}")
            except Exception as e:
                self.log(f"Exception for Trace {trace_uuid}: {e}")

        with requests.Session() as session:
            session.headers.update(headers)
            with ThreadPoolExecutor(max_workers=5) as executor:
                executor.map(fetch_notes, traces)

        if not final_data:
            self.log("No traces with notes found in the specified date range.")
            return

        # Create DataFrame with dynamic columns based on max_notes
        columns = ['Trace ID', 'Current Trace Status']
        for i in range(1, max_notes + 1):
            columns.extend([
                f'Previous Status {i}',
                f'Creation Date {i}',
                f'Current Creator {i}',
                f'Current Creator {i} uid',
                f'Current Creator Note {i}',
                f'Blank_{i}'
            ])
        columns.extend(['Application Name', 'Application ID', 'Severity', 'Rule Name', 'Rule Title'])
        
        # Convert final_data to DataFrame, ensuring all columns are present
        df = pd.DataFrame(final_data)
        for col in columns:
            if col not in df.columns:
                df[col] = ''
        df = df[columns]  # Reorder columns

        # Save to Final.xlsx
        excel_file = os.path.join(script_dir, 'Final.xlsx')
        df.to_excel(excel_file, index=False)
        self.log("Final data saved to Final.xlsx")

        # Apply formatting
        wb = load_workbook(excel_file)
        ws = wb.active

        # Define borders
        medium_border = Border(
            left=Side(style='medium'), right=Side(style='medium'),
            top=Side(style='medium'), bottom=Side(style='medium')
        )
        thin_border = Border(
            left=Side(style='thin'), right=Side(style='thin'),
            top=Side(style='thin'), bottom=Side(style='thin')
        )
        no_border = Border()  # No borders for blank columns
        center_align = Alignment(horizontal='center', vertical='center')
        left_align = Alignment(horizontal='left', vertical='center')
        bold_font = Font(bold=True)

        # Apply formatting to headers
        for col_idx in range(1, ws.max_column + 1):
            cell = ws.cell(row=1, column=col_idx)
            cell.font = bold_font
            cell.alignment = center_align if col_idx > 1 else left_align
            cell.border = thin_border if not cell.value.startswith('Blank_') else no_border

        # Apply formatting to data rows
        for row_idx in range(2, ws.max_row + 1):
            for col_idx in range(1, ws.max_column + 1):
                cell = ws.cell(row=row_idx, column=col_idx)
                cell.alignment = center_align if col_idx > 1 else left_align
                # Apply medium borders to Trace ID and Current Trace Status (columns 1-2)
                if 1 <= col_idx <= 2:
                    cell.border = medium_border
                # Apply medium borders to note groups (5 columns: Previous Status i, Creation Date i, Current Creator i, Current Creator i uid, Current Creator Note i)
                elif col_idx > 2 and (col_idx - 3) % 6 < 5:
                    cell.border = medium_border
                # Apply no borders to blank columns (every 6th column starting from 8, 14, etc.)
                elif col_idx > 2 and (col_idx - 3) % 6 == 5:
                    cell.border = no_border
                # Apply thin borders to Application Name, Application ID, Severity, Rule Name, Rule Title
                else:
                    cell.border = thin_border

        wb.save(excel_file)
        self.log("Formatting applied to Final.xlsx")

if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()