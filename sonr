import requests
import base64
import pandas as pd
from datetime import datetime, timedelta
from openpyxl import load_workbook, Workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment, Font, Border, Side
import os

# Step 1: Set up SonarQube API token and headers
sonartoken = "gdjdjdjdjdjrjjrjd"
auth_string = f"{sonartoken}:"
auth_encoded = base64.b64encode(auth_string.encode()).decode()
headers = {
    "Authorization": f"Basic {auth_encoded}",
    "Accept": "application/json",
    "Content-Type": "application/json"
}

# Step 2: Fetch projects and save to Projects.xlsx
project_url = "https://sonar.crm.com/api/components/search?qualifiers=TRK&ps=500"
response = requests.get(project_url, headers=headers)
projects_data = response.json()

# Extract project details
projects_list = []
for component in projects_data.get("components", []):
    projects_list.append({
        "key": component["key"],
        "name": component["name"],
        "project": component["name"]
    })

# Save to Projects.xlsx
projects_df = pd.DataFrame(projects_list)
projects_df.to_excel("Projects.xlsx", index=False)

# Step 3: Fetch vulnerabilities for each project and save to Vulnerabilities.xlsx
vulnerabilities_list = []
for key in projects_df["key"]:
    vuln_url = f"https://sonar.crm.com/api/issues/search?componentKeys={key}&types=VULNERABILITY&resolved=false&statuses=OPEN"
    response = requests.get(vuln_url, headers=headers)
    vuln_data = response.json()

    for issue in vuln_data.get("issues", []):
        vulnerabilities_list.append({
            "key": issue["key"],
            "severity": issue.get("severity", ""),
            "component": issue.get("component", ""),
            "project": issue.get("project", ""),
            "line": issue.get("line", ""),
            "status": issue.get("status", ""),
            "message": issue.get("message", "")
        })

# Save to Vulnerabilities.xlsx
vulnerabilities_df = pd.DataFrame(vulnerabilities_list)
vulnerabilities_df.to_excel("Vulnerabilities.xlsx", index=False)

# Step 4: Fetch hotspots for each project and save to Hotspots.xlsx
hotspots_list = []
for key in projects_df["key"]:
    hotspot_url = f"https://sonar.crm.com/api/hotspots/search?projectKey={key}&status=TO_REVIEW"
    response = requests.get(hotspot_url, headers=headers)
    hotspot_data = response.json()

    for hotspot in hotspot_data.get("hotspots", []):
        hotspots_list.append({
            "key": hotspot["key"],
            "component": hotspot.get("component", ""),
            "project": hotspot.get("project", ""),
            "securityCategory": hotspot.get("securityCategory", ""),
            "vulnerabilityProbability": hotspot.get("vulnerabilityProbability", ""),
            "status": hotspot.get("status", ""),
            "line": hotspot.get("line", ""),
            "message": hotspot.get("message", "")
        })

# Save to Hotspots.xlsx
hotspots_df = pd.DataFrame(hotspots_list)
hotspots_df.to_excel("Hotspots.xlsx", index=False)

# Step 5: Prepare data for Final.xlsx
# Get unique project keys from both Vulnerabilities and Hotspots
unique_projects = set(vulnerabilities_df["project"]).union(set(hotspots_df["project"]))

# Dynamically get the current date
current_date = datetime.now()
current_date_str = current_date.strftime("%d-%b-%y").replace("May", "May").replace("Jan", "Jan")

# Check if Final.xlsx exists to determine the dates to include
if os.path.exists("Final.xlsx"):
    # Load existing Final.xlsx
    existing_df = pd.read_excel("Final.xlsx")
    existing_dates = set()
    existing_projects = set(existing_df["project"].values) - {"Total"}  # Exclude "Total" row
    for col in existing_df.columns:
        if col != "project" and col != "Total":
            date_part = col.split("_")[0]
            existing_dates.add(date_part)
    dates = list(existing_dates) + [current_date_str]
else:
    # If Final.xlsx doesn't exist, use only the current date
    dates = [current_date_str]
    existing_projects = set()

# Remove duplicates and sort dates
dates = sorted(list(set(dates)))

# Define categories for vulnerabilities and hotspots separately
vuln_categories = ["BLOCKER", "CRITICAL", "MAJOR", "MINOR", "INFO"]
hotspot_categories = ["CRITICAL", "HIGH", "MEDIUM", "LOW", "OTHER"]

# Initialize the pivot table structure
pivot_data = []
new_projects = unique_projects - existing_projects  # Identify new projects
all_projects = unique_projects.union(existing_projects)

for project in all_projects:
    row = {"project": project}
    
    # For each date, calculate counts
    for date in dates:
        # Only calculate counts for the current date if the project is new
        if project in new_projects and date != current_date_str:
            for category in vuln_categories:
                row[f"{date}_VULNERABILITY_{category}"] = None
            for category in hotspot_categories:
                row[f"{date}_HOTSPOT_{category}"] = None
            continue

        # Filter vulnerabilities and hotspots for the project
        vuln_filtered = vulnerabilities_df[vulnerabilities_df["project"] == project]
        hotspot_filtered = hotspots_df[hotspots_df["project"] == project]

        # Add vulnerability counts
        for category in vuln_categories:
            count = len(vuln_filtered[vuln_filtered["severity"] == category])
            row[f"{date}_VULNERABILITY_{category}"] = count if count > 0 else None

        # Add hotspot counts
        for category in hotspot_categories:
            count = len(hotspot_filtered[hotspot_filtered["vulnerabilityProbability"] == category])
            row[f"{date}_HOTSPOT_{category}"] = count if count > 0 else None

    pivot_data.append(row)

# Create DataFrame for the pivot table
pivot_df = pd.DataFrame(pivot_data)

# Reorder columns
columns_order = ["project"]
for date in dates:
    columns_order.extend([f"{date}_VULNERABILITY_{category}" for category in vuln_categories])
    columns_order.extend([f"{date}_HOTSPOT_{category}" for category in hotspot_categories])
pivot_df = pivot_df[columns_order]

# If Final.xlsx exists, append new projects and update data
if os.path.exists("Final.xlsx"):
    # Load existing data
    existing_df = pd.read_excel("Final.xlsx")
    # Remove the Total row and Total column if they exist
    if "Total" in existing_df["project"].values:
        existing_df = existing_df[existing_df["project"] != "Total"]
    if "Total" in existing_df.columns:
        existing_df = existing_df.drop(columns=["Total"])
    
    # Merge with new data (update existing projects, add new ones)
    combined_df = existing_df.set_index("project").combine_first(pivot_df.set_index("project")).reset_index()
    pivot_df = combined_df[columns_order]

# Add Total column for each row
pivot_df["Total"] = pivot_df.iloc[:, 1:].sum(axis=1)

# Add Total row at the bottom
total_row = {"project": "Total"}
for col in pivot_df.columns[1:]:  # Skip the project column
    total_row[col] = pivot_df[col].sum()
total_df = pd.DataFrame([total_row])
pivot_df = pd.concat([pivot_df, total_df], ignore_index=True)

# Save to Final.xlsx with two extra rows at the top for date and section headers
with pd.ExcelWriter("Final.xlsx", engine="openpyxl") as writer:
    pivot_df.to_excel(writer, index=False, startrow=2)

# Step 6: Use openpyxl to format the Excel file
wb = load_workbook("Final.xlsx")
ws = wb.active

# Number of columns per date for vulnerabilities and hotspots
vuln_cols_per_date = len(vuln_categories)  # 5
hotspot_cols_per_date = len(hotspot_categories)  # 5
total_cols_per_date = vuln_cols_per_date + hotspot_cols_per_date  # 10

# Define border styles
thin_border = Border(
    left=Side(style="thin"),
    right=Side(style="thin"),
    top=Side(style="thin"),
    bottom=Side(style="thin")
)
bold_border = Border(
    left=Side(style="medium"),
    right=Side(style="medium"),
    top=Side(style="medium"),
    bottom=Side(style="medium")
)

# Merge cells for each date in row 1 and apply formatting
for i, date in enumerate(dates):
    start_col = 2 + i * total_cols_per_date  # Start after 'project' column
    end_col = start_col + total_cols_per_date - 1
    start_col_letter = get_column_letter(start_col)
    end_col_letter = get_column_letter(end_col)
    ws.merge_cells(f"{start_col_letter}1:{end_col_letter}1")
    date_cell = ws[f"{start_col_letter}1"]
    date_cell.value = date
    date_cell.alignment = Alignment(horizontal="center", vertical="center")
    date_cell.font = Font(bold=True)
    # Apply border to merged date cell
    for col in range(start_col, end_col + 1):
        ws.cell(row=1, column=col).border = thin_border

# Merge cells for "VULNERABILITY" and "HOTSPOT" in row 2 and apply formatting
for i, date in enumerate(dates):
    # VULNERABILITY section
    vuln_start_col = 2 + i * total_cols_per_date
    vuln_end_col = vuln_start_col + vuln_cols_per_date - 1
    vuln_start_col_letter = get_column_letter(vuln_start_col)
    vuln_end_col_letter = get_column_letter(vuln_end_col)
    ws.merge_cells(f"{vuln_start_col_letter}2:{vuln_end_col_letter}2")
    vuln_cell = ws[f"{vuln_start_col_letter}2"]
    vuln_cell.value = "VULNERABILITY"
    vuln_cell.alignment = Alignment(horizontal="center", vertical="center")
    vuln_cell.font = Font(bold=True)
    # Apply border to merged VULNERABILITY cell
    for col in range(vuln_start_col, vuln_end_col + 1):
        ws.cell(row=2, column=col).border = thin_border

    # HOTSPOT section
    hotspot_start_col = vuln_end_col + 1
    hotspot_end_col = hotspot_start_col + hotspot_cols_per_date - 1
    hotspot_start_col_letter = get_column_letter(hotspot_start_col)
    hotspot_end_col_letter = get_column_letter(hotspot_end_col)
    ws.merge_cells(f"{hotspot_start_col_letter}2:{hotspot_end_col_letter}2")
    hotspot_cell = ws[f"{hotspot_start_col_letter}2"]
    hotspot_cell.value = "HOTSPOT"
    hotspot_cell.alignment = Alignment(horizontal="center", vertical="center")
    hotspot_cell.font = Font(bold=True)
    # Apply border to merged HOTSPOT cell
    for col in range(hotspot_start_col, hotspot_end_col + 1):
        ws.cell(row=2, column=col).border = thin_border

# Update the headers in row 3 to show only the category names and apply borders
for col_idx, col_name in enumerate(pivot_df.columns, start=1):
    cell = ws.cell(row=3, column=col_idx)
    if col_name != "project":
        if col_name == "Total":
            cell.value = "Total"
        else:
            category = col_name.split("_")[-1]  # Extract the category (e.g., BLOCKER)
            cell.value = category
    cell.border = thin_border

# Apply alignments, borders, and bold formatting to Total row
for row in range(4, ws.max_row + 1):  # Start from row 4 (data rows)
    for col in range(1, ws.max_column + 1):
        cell = ws.cell(row=row, column=col)
        # Center-align all cells except the project column
        if col == 1:  # Project column
            cell.alignment = Alignment(horizontal="left", vertical="center")
        else:
            cell.alignment = Alignment(horizontal="center", vertical="center")
        # Apply thin border to all cells
        cell.border = thin_border
        # Bold the Total row
        if row == ws.max_row:  # Total row
            cell.font = Font(bold=True)

# Apply bold outline to the entire table
for row in range(1, ws.max_row + 1):
    for col in range(1, ws.max_column + 1):
        cell = ws.cell(row=row, column=col)
        # Top border
        if row == 1:
            cell.border = Border(
                left=cell.border.left,
                right=cell.border.right,
                top=Side(style="medium"),
                bottom=cell.border.bottom
            )
        # Bottom border
        if row == ws.max_row:
            cell.border = Border(
                left=cell.border.left,
                right=cell.border.right,
                top=cell.border.top,
                bottom=Side(style="medium")
            )
        # Left border
        if col == 1:
            cell.border = Border(
                left=Side(style="medium"),
                right=cell.border.right,
                top=cell.border.top,
                bottom=cell.border.bottom
            )
        # Right border
        if col == ws.max_column:
            cell.border = Border(
                left=cell.border.left,
                right=Side(style="medium"),
                top=cell.border.top,
                bottom=cell.border.bottom
            )

# Apply bold vertical line to the left of column B
for row in range(1, ws.max_row + 1):
    cell = ws.cell(row=row, column=2)
    cell.border = Border(
        left=Side(style="medium"),
        right=cell.border.right,
        top=cell.border.top,
        bottom=cell.border.bottom
    )

# Apply bold vertical line to the left of column L for each date
# Column L is the 12th column (for the first date), then 22nd, 32nd, etc.
for i in range(len(dates)):
    col = 2 + i * total_cols_per_date + vuln_cols_per_date  # Left of HOTSPOT section
    for row in range(1, ws.max_row + 1):
        cell = ws.cell(row=row, column=col)
        cell.border = Border(
            left=Side(style="medium"),
            right=cell.border.right,
            top=cell.border.top,
            bottom=cell.border.bottom
        )

# Save the modified Excel file
wb.save("Final.xlsx")

print("Data downloaded, pivot table created, and formatting applied successfully!")