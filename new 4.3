<!-- Tests Modal -->
<div class="modal fade" id="testsModal" tabindex="-1" aria-labelledby="testsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header text-center">
        <h5 class="modal-title w-100" id="testsModalLabel">Tests for Engagement</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Tests Filter Section -->
        <div class="filter-section mb-3">
          <div class="row g-3">
            <div class="col-md-3">
              <label for="testsFilterId" class="form-label">ID</label>
              <input type="text" class="form-control" id="testsFilterId" placeholder="Enter ID">
            </div>
            <div class="col-md-3">
              <label for="testsFilterTestName" class="form-label">Test Name</label>
              <select class="form-select" id="testsFilterTestName">
                <option value="">All</option>
              </select>
            </div>
            <div class="col-md-3">
              <label for="testsFilterTitle" class="form-label">Branch Tag</label>
              <input type="text" class="form-control" id="testsFilterTitle" placeholder="Enter branch tag">
            </div>
            <div class="col-md-3">
              <label for="testsFilterStatus" class="form-label">Status</label>
              <select class="form-select" id="testsFilterStatus">
                <option value="">All</option>
                <option value="NA">NA</option>
                <option value="Pass">Pass</option>
                <option value="Fail">Fail</option>
              </select>
            </div>
            <div class="col-md-3 d-flex align-items-end">
              <button class="btn btn-primary me-2" id="testsApplyFilters">Apply Filters</button>
              <button class="btn btn-secondary" id="testsResetFilters">Reset Filters</button>
            </div>
          </div>
        </div>
        <!-- Tests Table -->
        <div class="table-responsive">
          <table class="table table-striped table-hover">
            <thead>
              <tr>
                <th>ID</th>
                <th>Test Name</th>
                <th>Branch Tag</th>
                <th>Description</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody id="testsTableBody"></tbody>
          </table>
        </div>
        <div class="pagination-section">
          <div id="testsPaginationStatus">Page 1 of 1 (0 results)</div>
          <div>
            <button class="btn btn-outline-primary btn-sm me-1" id="testsFirstPage">First</button>
            <button class="btn btn-outline-primary btn-sm me-1" id="testsPrevPage">Previous</button>
            <button class="btn btn-outline-primary btn-sm me-1" id="testsNextPage">Next</button>
            <button class="btn btn-outline-primary btn-sm" id="testsLastPage">Last</button>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>




async function fetchTestsForEngagement(engagementId) {
  try {
    const response = await fetch(`https://demo.defectdojo.org/api/v2/tests/?engagement=${engagementId}&tags=pci_jira_owasp&limit=100`);
    if (!response.ok) {
      showToast(`Failed to fetch tests: ${response.status}`, 'error');
      return;
    }
    const testsData = await response.json();
    const tests = Array.isArray(testsData) ? testsData : testsData.results || [];

    testsAllData = [];

    for (const test of tests) {
      let branchTag = 'N/A';
      // Find the corresponding rmm_jira_owasp test using commit_hash
      if (test.title) {
        try {
          const rmmResponse = await fetch(`https://demo.defectdojo.org/api/v2/tests/?engagement=${engagementId}&tags=rmm_jira_owasp&commit_hash=${encodeURIComponent(test.title)}&limit=1`);
          if (rmmResponse.ok) {
            const rmmData = await rmmResponse.json();
            const rmmTests = Array.isArray(rmmData) ? rmmData : rmmData.results || [];
            if (rmmTests.length > 0 && rmmTests[0].branch_tag) {
              branchTag = rmmTests[0].branch_tag;
            }
          }
        } catch (error) {
          console.error(`Error fetching rmm_jira_owasp test for test ${test.id}:`, error);
        }
      }

      testsAllData.push({
        id: test.id,
        test_name: test.title || 'N/A',
        branch_tag: branchTag, // Store branch_tag instead of title
        description: test.description || '',
        status: test.build_id || 'NA'
      });
    }

    testsFilteredData = [...testsAllData];
    testsCurrentPage = 1;
    testsApplyFilters();
    await populateTestNameFilter();
  } catch (error) {
    console.error('Error fetching tests:', error);
    showToast('Error fetching tests: ' + error.message, 'error');
  }
}

function testsRenderTable() {
  const start = (testsCurrentPage - 1) * testsPageSize;
  const pagedData = testsFilteredData.slice(start, start + testsPageSize);
  const totalPages = Math.ceil(testsFilteredData.length / testsPageSize);

  const tableBody = document.getElementById('testsTableBody');
  tableBody.innerHTML = pagedData.map(item => `
    <tr>
      <td>${item.id || 'N/A'}</td>
      <td>${item.test_name || 'N/A'}</td>
      <td>${item.branch_tag || 'N/A'}</td>
      <td>${item.description || ''}</td>
      <td>
        <select class="form-select status-select" data-test-id="${item.id}">
          <option value="NA" ${item.status === 'NA' ? 'selected' : ''}>NA</option>
          <option value="Pass" ${item.status === 'Pass' ? 'selected' : ''}>Pass</option>
          <option value="Fail" ${item.status === 'Fail' ? 'selected' : ''}>Fail</option>
        </select>
      </td>
    </tr>
  `).join('');

  document.getElementById('testsPaginationStatus').textContent = `Page ${testsCurrentPage} of ${totalPages} (${testsFilteredData.length} results)`;
  document.getElementById('testsFirstPage').disabled = testsCurrentPage === 1;
  document.getElementById('testsPrevPage').disabled = testsCurrentPage === 1;
  document.getElementById('testsNextPage').disabled = testsCurrentPage === totalPages;
  document.getElementById('testsLastPage').disabled = testsCurrentPage === totalPages;

  document.querySelectorAll('.status-select').forEach(select => {
    select.addEventListener('change', (event) => {
      const testId = event.target.getAttribute('data-test-id');
      const newStatus = event.target.value;
      updateTestStatus(testId, newStatus);
    });
  });
}
