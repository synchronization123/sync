// Modified mappingSaveTests function
async function mappingSaveTests() {
  if (!csrfToken) {
    showToast('CSRF token not available. Please try again.', 'error');
    return;
  }

  try {
    const jiraTest = jiraAllTests.find(t => t.id == currentJiraTestId);
    if (!jiraTest || !jiraTest.engagement) {
      showToast('Jira test or engagement ID not found', 'error');
      return;
    }
    const engagementId = jiraTest.engagement;
    const engagementLead = jiraTest.lead || null;
    const jiraTestTitle = jiraTest.title || `Jira_Test_${currentJiraTestId}`; // Title of rmm_jira test

    // Process each test in mappingSelections
    const mappedIds = [];
    for (const [testId, status] of Object.entries(mappingSelections)) {
      const test = mappingAllTests.find(t => t.id == testId);
      if (!test) continue;

      const testTitle = test.title || `Test_${testId}`;
      const rmmTestCommitHash = testTitle; // Use test title as commit_hash

      if (status === 'Yes') {
        mappedIds.push(testId);

        // Check if an rmm_jira_owasp test already exists
        const existingRmmTest = await findExistingRmmTest(engagementId, rmmTestCommitHash);
        if (!existingRmmTest) {
          // Create new test with tag rmm_jira_owasp and mandatory parameters
          const newTestData = {
            title: testTitle,
            description: test.description || '',
            engagement: engagementId,
            target_start: new Date().toISOString().slice(0, 10),
            target_end: new Date().toISOString().slice(0, 10),
            test_type: test.test_type || null,
            test_type_name: test.test_type_name || test.test_type || '',
            lead: engagementLead,
            tags: ['rmm_jira_owasp'],
            commit_hash: rmmTestCommitHash,
            branch_tag: jiraTestTitle, // Set branch_tag to rmm_jira test title
            build_id: 'NA'
          };

          const createResponse = await fetch('https://demo.defectdojo.org/api/v2/tests/', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRFToken': csrfToken
            },
            body: JSON.stringify(newTestData)
          });

          if (!createResponse.ok) {
            showToast(`Failed to create rmm_jira_owasp test for test ${testId}: ${createResponse.status}`, 'error');
            continue;
          }
          console.log(`Created rmm_jira_owasp test for test ${testId} with branch_tag: ${jiraTestTitle}`);
        }
      } else if (status === 'NA') {
        // Delete existing rmm_jira_owasp test if it exists
        const existingRmmTest = await findExistingRmmTest(engagementId, rmmTestCommitHash);
        if (existingRmmTest) {
          const deleteResponse = await fetch(`https://demo.defectdojo.org/api/v2/tests/${existingRmmTest.id}/`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRFToken': csrfToken
            }
          });

          if (!deleteResponse.ok && deleteResponse.status !== 204) {
            showToast(`Failed to delete rmm_jira_owasp test for test ${testId}: ${deleteResponse.status}`, 'error');
            continue;
          }
          console.log(`Deleted rmm_jira_owasp test ${existingRmmTest.id} for test ${testId}`);
        }
      }
    }

    // Update the Jira test's commit_hash with the mapped test IDs
    const commitHash = mappedIds.join(',');
    const updateResponse = await fetch(`https://demo.defectdojo.org/api/v2/tests/${currentJiraTestId}/`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRFToken': csrfToken
      },
      body: JSON.stringify({ commit_hash: commitHash })
    });

    if (updateResponse.ok) {
      showToast('Test mappings saved successfully', 'success');
      jiraTest.commit_hash = commitHash;
      jiraApplyFilters();
      const modal = bootstrap.Modal.getInstance(document.getElementById('mappingModal'));
      if (modal) modal.hide();
    } else {
      showToast(`Failed to save test mappings: ${updateResponse.status}`, 'error');
    }
  } catch (error) {
    console.error('Error saving test mappings:', error);
    showToast('Error saving test mappings: ' + error.message, 'error');
  }
}