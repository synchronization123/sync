<!-- Engagements with Test Count Tab -->
<div class="tab-pane fade" id="engagements-test-count" role="tabpanel" aria-labelledby="engagements-test-count-tab">
  <!-- Engagements-Test-Count Filter Section -->
  <div class="filter-section">
    <div class="d-flex justify-content-between align-items-center mb-2">
      <h5 class="mb-0">Filters</h5>
      <button class="btn btn-link" type="button" data-bs-toggle="collapse" data-bs-target="#engTestCountFilterCollapse" aria-expanded="true" aria-controls="engTestCountFilterCollapse">
        <i class="bi bi-chevron-down"></i> Toggle Filters
      </button>
    </div>
    <div class="collapse show" id="engTestCountFilterCollapse">
      <div class="row g-3">
        <div class="col-md-2">
          <label for="engTestCountFilterId" class="form-label">ID</label>
          <input type="text" class="form-control" id="engTestCountFilterId" placeholder="Enter ID">
        </div>
        <div class="col-md-2">
          <label for="engTestCountFilterCreated" class="form-label">Created</label>
          <input type="date" class="form-control" id="engTestCountFilterCreated">
        </div>
        <div class="col-md-2">
          <label for="engTestCountFilterName" class="form-label">Name</label>
          <input type="text" class="form-control" id="engTestCountFilterName" placeholder="Enter name">
        </div>
        <div class="col-md-2">
          <label for="engTestCountFilterTargetStart" class="form-label">Start Date</label>
          <input type="date" class="form-control" id="engTestCountFilterTargetStart">
        </div>
        <div class="col-md-2">
          <label for="engTestCountFilterTargetEnd" class="form-label">End Date</label>
          <input type="date" class="form-control" id="engTestCountFilterTargetEnd">
        </div>
        <div class="col-md-2">
          <label for="engTestCountFilterAssignedTo" class="form-label">Assigned To</label>
          <select class="form-select" id="engTestCountFilterAssignedTo">
            <option value="">All</option>
          </select>
        </div>
        <div class="col-md-2">
          <label for="engTestCountFilterComponent" class="form-label">Component</label>
          <select class="form-select" id="engTestCountFilterComponent">
            <option value="">All</option>
          </select>
        </div>
        <div class="col-md-2">
          <label for="engTestCountFilterStatus" class="form-label">Status</label>
          <select class="form-select" id="engTestCountFilterStatus">
            <option value="">All</option>
            <option value="Not Started">Not Started</option>
            <option value="In Progress">In Progress</option>
            <option value="On Hold">On Hold</option>
            <option value="Completed">Completed</option>
          </select>
        </div>
        <div class="col-md-2">
          <label for="engTestCountFilterCertification" class="form-label">Certification</label>
          <select class="form-select" id="engTestCountFilterCertification">
            <option value="">All</option>
            <option value="Pending">Pending</option>
            <option value="Certified">Certified</option>
            <option value="Not Certified">Not Certified</option>
            <option value="Certified with Exception">Certified with Exception</option>
          </select>
        </div>
        <div class="col-md-12 d-flex justify-content-end">
          <button class="btn btn-primary me-2" id="engTestCountApplyFilters">Apply Filters</button>
          <button class="btn btn-secondary" id="engTestCountResetFilters">Reset Filters</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Engagements-Test-Count Table Section -->
  <div class="table-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h5>Total Count: <span id="engTestCountTotalCount">0</span></h5>
    </div>
    <div class="table-responsive">
      <table class="table table-striped table-hover">
        <thead>
          <tr>
            <th>ID</th>
            <th>Created</th>
            <th>Name</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Assigned To</th>
            <th>Component</th>
            <th>Status</th>
            <th>Certification</th>
            <th>Test Case Count</th>
          </tr>
        </thead>
        <tbody id="engTestCountTableBody"></tbody>
      </table>
    </div>
    <div class="pagination-section">
      <div id="engTestCountPaginationStatus">Page 1 of 1 (0 results)</div>
      <div>
        <button class="btn btn-outline-primary btn-sm me-1" id="engTestCountFirstPage">First</button>
        <button class="btn btn-outline-primary btn-sm me-1" id="engTestCountPrevPage">Previous</button>
        <button class="btn btn-outline-primary btn-sm me-1" id="engTestCountNextPage">Next</button>
        <button class="btn btn-outline-primary btn-sm" id="engTestCountLastPage">Last</button>
      </div>
    </div>
  </div>
</div>

<!-- Tests Modal -->
<div class="modal fade" id="testsModal" tabindex="-1" aria-labelledby="testsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="testsModalLabel">Tests for Engagement</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Tests Filter Section -->
        <div class="filter-section mb-3">
          <div class="row g-3">
            <div class="col-md-3">
              <label for="testsFilterId" class="form-label">ID</label>
              <input type="text" class="form-control" id="testsFilterId" placeholder="Enter ID">
            </div>
            <div class="col-md-3">
              <label for="testsFilterTitle" class="form-label">Title</label>
              <input type="text" class="form-control" id="testsFilterTitle" placeholder="Enter title">
            </div>
            <div class="col-md-3">
              <label for="testsFilterStatus" class="form-label">Status</label>
              <select class="form-select" id="testsFilterStatus">
                <option value="">All</option>
                <option value="NA">NA</option>
                <option value="Pass">Pass</option>
                <option value="Fail">Fail</option>
              </select>
            </div>
            <div class="col-md-3 d-flex align-items-end">
              <button class="btn btn-primary me-2" id="testsApplyFilters">Apply Filters</button>
              <button class="btn btn-secondary" id="testsResetFilters">Reset Filters</button>
            </div>
          </div>
        </div>
        <!-- Tests Table -->
        <div class="table-responsive">
          <table class="table table-striped table-hover">
            <thead>
              <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Description</th>
                <th>Commit Hash</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody id="testsTableBody"></tbody>
          </table>
        </div>
        <div class="pagination-section">
          <div id="testsPaginationStatus">Page 1 of 1 (0 results)</div>
          <div>
            <button class="btn btn-outline-primary btn-sm me-1" id="testsFirstPage">First</button>
            <button class="btn btn-outline-primary btn-sm me-1" id="testsPrevPage">Previous</button>
            <button class="btn btn-outline-primary btn-sm me-1" id="testsNextPage">Next</button>
            <button class="btn btn-outline-primary btn-sm" id="testsLastPage">Last</button>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Toast Container (for this tab, can be shared if already present) -->
<div id="toastContainer" class="toast-container position-fixed bottom-0 end-0 p-3"></div>

<style>
  .filter-section {
    background-color: #fff;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  .filter-section .btn-link {
    color: #007bff;
    text-decoration: none;
  }
  .filter-section .btn-link:hover {
    color: #0056b3;
  }
  .table-container {
    background-color: #fff;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  .table th, .table td {
    vertical-align: middle;
  }
  .select2-container--bootstrap-5 .select2-selection {
    height: 38px;
    padding: 6px 12px;
  }
  .pagination-section {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 15px;
  }
  .toast-container {
    z-index: 1055;
  }
  .modal-xl .modal-content {
    border-radius: 8px;
  }
</style>

<script>
  // Shared Variables and Functions (merge with existing if already present)
  let usersCache = {};
  let engProductsCache = {};
  let csrfToken = null;

  async function fetchCsrfToken() {
    try {
      const response = await fetch('https://demo.defectdojo.org/api/key-v2');
      if (!response.ok) {
        showToast(`Failed to fetch CSRF token page: ${response.status}`, 'error');
        return;
      }
      const html = await response.text();
      const patterns = [
        /name="csrfmiddlewaretoken"\s+value="([^"]+)"/,
        /name="csrf_token"\s+value="([^"]+)"/,
        /<meta name="csrf-token" content="([^"]+)"/,
        /var\s+csrf_token\s*=\s*['"]([^'"]+)['"]/
      ];
      for (const pattern of patterns) {
        const match = html.match(pattern);
        if (match) {
          csrfToken = match[1];
          console.log('CSRF token fetched:', csrfToken);
          return;
        }
      }
      console.error('CSRF token not found. HTML response:', html);
      showToast('CSRF token not found in API key page. Check console for HTML.', 'error');
    } catch (error) {
      console.error('Error fetching CSRF token:', error);
      showToast('Error fetching CSRF token: ' + error.message, 'error');
    }
  }

  async function fetchAllUsers() {
    try {
      const response = await fetch('https://demo.defectdojo.org/api/v2/users/');
      if (response.ok) {
        const data = await response.json();
        const users = Array.isArray(data) ? data : data.results || [];
        users.forEach(user => {
          usersCache[user.id] = { id: user.id, name: `${user.first_name || ''} ${user.last_name || ''}`.trim() || 'Unknown' };
        });
      } else {
        showToast('Failed to fetch users', 'error');
      }
    } catch (error) {
      console.error('Error fetching users:', error);
    }
  }

  async function engFetchAllProducts() {
    try {
      const response = await fetch('https://demo.defectdojo.org/api/v2/products/?limit=100');
      if (response.ok) {
        const data = await response.json();
        const products = Array.isArray(data) ? data : data.results || [];
        products.forEach(product => {
          engProductsCache[product.id] = { id: product.id, name: product.name || 'Unknown' };
        });
      } else {
        showToast('Failed to fetch products', 'error');
      }
    } catch (error) {
      console.error('Error fetching products:', error);
    }
  }

  function showToast(message, type = 'info') {
    const toastContainer = document.getElementById('toastContainer');
    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : type === 'warning' ? 'warning' : type === 'success' ? 'success' : type} border-0`;
    toast.setAttribute('role', 'alert');
    toast.innerHTML = `
      <div class="d-flex">
        <div class="toast-body">${message}</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    `;
    toastContainer.appendChild(toast);
    const bsToast = new bootstrap.Toast(toast, { autohide: true, delay: 5000 });
    bsToast.show();
    toast.addEventListener('hidden.bs.toast', () => toast.remove());
  }

  // Engagements-Test-Count Tab Logic
  let engTestCountAllData = [];
  let engTestCountFilteredData = [];
  let engTestCountCurrentPage = 1;
  const engTestCountPageSize = 10;

  let testsAllData = [];
  let testsFilteredData = [];
  let testsCurrentPage = 1;
  const testsPageSize = 10;

  async function engTestCountFetchData() {
    try {
      // Fetch engagements
      const engResponse = await fetch('https://demo.defectdojo.org/api/v2/engagements/?limit=100');
      if (!engResponse.ok) {
        showToast(`Failed to fetch engagements: ${engResponse.status}`, 'error');
        return;
      }
      const engData = await engResponse.json();
      const engagements = Array.isArray(engData) ? engData : engData.results || [];

      // Fetch products and users
      await engFetchAllProducts();
      await fetchAllUsers();

      engTestCountAllData = [];

      for (const eng of engagements) {
        // Fetch test count for each engagement with tag 'pci_jira_owasp'
        const testsResponse = await fetch(`https://demo.defectdojo.org/api/v2/tests/?engagement=${eng.id}&tags=pci_jira_owasp&limit=100`);
        if (!testsResponse.ok) {
          console.error(`Failed to fetch tests for engagement ${eng.id}: ${testsResponse.status}`);
          continue;
        }
        const testsData = await testsResponse.json();
        const tests = Array.isArray(testsData) ? testsData : testsData.results || [];
        const testCount = tests.length;

        // Determine engagement status
        let status = 'In Progress';
        if (tests.length > 0) {
          const allCompleted = tests.every(t => t.build_id === 'Pass' || t.build_id === 'Fail');
          const anyNotStarted = tests.some(t => t.build_id === 'Not Started' || !t.build_id);
          if (allCompleted) {
            status = 'Completed';
          } else if (anyNotStarted) {
            status = 'In Progress';
          }
        }

        engTestCountAllData.push({
          id: eng.id,
          created: eng.created,
          name: eng.name,
          target_start: eng.target_start,
          target_end: eng.target_end,
          lead: eng.lead,
          lead_name: eng.lead ? usersCache[eng.lead]?.name || 'Unassigned' : 'Unassigned',
          product: eng.product,
          product_name: engProductsCache[eng.product]?.name || 'Unknown',
          status: status,
          build_id: eng.build_id || 'Pending',
          test_count: testCount
        });
      }

      if (engTestCountAllData.length === 0) {
        showToast('No engagements found', 'warning');
      }

      engTestCountFilteredData = [...engTestCountAllData];
      engTestCountApplyFilters();
      await engTestCountPopulateFilterDropdowns();
    } catch (error) {
      console.error('Error fetching engagements:', error);
      showToast('Error fetching engagements: ' + error.message, 'error');
    }
  }

  async function engTestCountPopulateFilterDropdowns() {
    const assignedToSelect = document.getElementById('engTestCountFilterAssignedTo');
    assignedToSelect.innerHTML = '<option value="">All</option>';
    Object.values(usersCache).forEach(user => {
      const option = document.createElement('option');
      option.value = user.id;
      option.textContent = user.name;
      assignedToSelect.appendChild(option);
    });

    const componentSelect = document.getElementById('engTestCountFilterComponent');
    componentSelect.innerHTML = '<option value="">All</option>';
    Object.values(engProductsCache).forEach(product => {
      const option = document.createElement('option');
      option.value = product.id;
      option.textContent = product.name;
      componentSelect.appendChild(option);
    });

    $('#engTestCountFilterAssignedTo, #engTestCountFilterComponent').select2({
      theme: 'bootstrap-5',
      width: '100%',
      placeholder: 'Search...',
      allowClear: true
    });
  }

  function engTestCountApplyFilters() {
    const id = document.getElementById('engTestCountFilterId').value;
    const created = document.getElementById('engTestCountFilterCreated').value;
    const name = document.getElementById('engTestCountFilterName').value.toLowerCase();
    const targetStart = document.getElementById('engTestCountFilterTargetStart').value;
    const targetEnd = document.getElementById('engTestCountFilterTargetEnd').value;
    const assignedTo = document.getElementById('engTestCountFilterAssignedTo').value;
    const component = document.getElementById('engTestCountFilterComponent').value;
    const status = document.getElementById('engTestCountFilterStatus').value;
    const certification = document.getElementById('engTestCountFilterCertification').value;

    engTestCountFilteredData = engTestCountAllData.filter(item => {
      if (id && item.id.toString() !== id) return false;
      if (created && item.created?.slice(0, 10) !== created) return false;
      if (name && item.name?.toLowerCase().includes(name) === false) return false;
      if (targetStart && item.target_start?.slice(0, 10) !== targetStart) return false;
      if (targetEnd && item.target_end?.slice(0, 10) !== targetEnd) return false;
      if (assignedTo && item.lead != assignedTo) return false;
      if (component && item.product != component) return false;
      if (status && item.status !== status) return false;
      if (certification && item.build_id !== certification) return false;
      return true;
    });

    engTestCountCurrentPage = 1;
    engTestCountRenderTable();
  }

  function engTestCountResetFilters() {
    document.getElementById('engTestCountFilterId').value = '';
    document.getElementById('engTestCountFilterCreated').value = '';
    document.getElementById('engTestCountFilterName').value = '';
    document.getElementById('engTestCountFilterTargetStart').value = '';
    document.getElementById('engTestCountFilterTargetEnd').value = '';
    $('#engTestCountFilterAssignedTo').val('').trigger('change');
    $('#engTestCountFilterComponent').val('').trigger('change');
    document.getElementById('engTestCountFilterStatus').value = '';
    document.getElementById('engTestCountFilterCertification').value = '';
    engTestCountApplyFilters();
  }

  function engTestCountRenderTable() {
    const start = (engTestCountCurrentPage - 1) * engTestCountPageSize;
    const pagedData = engTestCountFilteredData.slice(start, start + engTestCountPageSize);
    const totalPages = Math.ceil(engTestCountFilteredData.length / engTestCountPageSize);

    document.getElementById('engTestCountTotalCount').textContent = engTestCountFilteredData.length;

    const tableBody = document.getElementById('engTestCountTableBody');
    tableBody.innerHTML = pagedData.map(item => `
      <tr>
        <td>${item.id || 'N/A'}</td>
        <td>${item.created?.slice(0, 10) || 'N/A'}</td>
        <td>${item.name || 'N/A'}</td>
        <td>${item.target_start?.slice(0, 10) || 'N/A'}</td>
        <td>${item.target_end?.slice(0, 10) || 'N/A'}</td>
        <td>${item.lead_name || 'Unassigned'}</td>
        <td>${item.product_name || 'Unknown'}</td>
        <td>${item.status || 'N/A'}</td>
        <td>${item.build_id || 'Pending'}</td>
        <td><a href="#" class="test-count-link" data-engagement-id="${item.id}">${item.test_count}</a></td>
      </tr>
    `).join('');

    document.getElementById('engTestCountPaginationStatus').textContent = `Page ${engTestCountCurrentPage} of ${totalPages} (${engTestCountFilteredData.length} results)`;
    document.getElementById('engTestCountFirstPage').disabled = engTestCountCurrentPage === 1;
    document.getElementById('engTestCountPrevPage').disabled = engTestCountCurrentPage === 1;
    document.getElementById('engTestCountNextPage').disabled = engTestCountCurrentPage === totalPages;
    document.getElementById('engTestCountLastPage').disabled = engTestCountCurrentPage === totalPages;

    // Attach click handlers for test count links
    document.querySelectorAll('.test-count-link').forEach(link => {
      link.addEventListener('click', async (event) => {
        event.preventDefault();
        const engagementId = link.getAttribute('data-engagement-id');
        await fetchTestsForEngagement(engagementId);
        const modal = new bootstrap.Modal(document.getElementById('testsModal'), {
          backdrop: 'static',
          keyboard: false
        });
        document.getElementById('testsModalLabel').textContent = `Tests for Engagement ${engagementId}`;
        modal.show();
      });
    });
  }

  async function fetchTestsForEngagement(engagementId) {
    try {
      const response = await fetch(`https://demo.defectdojo.org/api/v2/tests/?engagement=${engagementId}&tags=pci_jira_owasp&limit=100`);
      if (!response.ok) {
        showToast(`Failed to fetch tests: ${response.status}`, 'error');
        return;
      }
      const testsData = await response.json();
      const tests = Array.isArray(testsData) ? testsData : testsData.results || [];

      testsAllData = [];

      for (const test of tests) {
        let testTitle = 'N/A';
        if (test.commit_hash && test.commit_hash.includes('_')) {
          const testId = test.commit_hash.split('_')[0];
          try {
            const titleResponse = await fetch(`https://demo.defectdojo.org/api/v2/tests/${testId}/`);
            if (titleResponse.ok) {
              const titleData = await titleResponse.json();
              testTitle = titleData.title || 'N/A';
            }
          } catch (error) {
            console.error(`Error fetching title for test ${testId}:`, error);
          }
        }

        testsAllData.push({
          id: test.id,
          title: testTitle,
          description: test.description || '',
          commit_hash: test.commit_hash || 'N/A',
          status: test.build_id || 'NA'
        });
      }

      testsFilteredData = [...testsAllData];
      testsCurrentPage = 1;
      testsApplyFilters();
    } catch (error) {
      console.error('Error fetching tests:', error);
      showToast('Error fetching tests: ' + error.message, 'error');
    }
  }

  function testsApplyFilters() {
    const id = document.getElementById('testsFilterId').value;
    const title = document.getElementById('testsFilterTitle').value.toLowerCase();
    const status = document.getElementById('testsFilterStatus').value;

    testsFilteredData = testsAllData.filter(item => {
      if (id && item.id.toString() !== id) return false;
      if (title && item.title?.toLowerCase().includes(title) === false) return false;
      if (status && item.status !== status) return false;
      return true;
    });

    testsCurrentPage = 1;
    testsRenderTable();
  }

  function testsResetFilters() {
    document.getElementById('testsFilterId').value = '';
    document.getElementById('testsFilterTitle').value = '';
    document.getElementById('testsFilterStatus').value = '';
    testsApplyFilters();
  }

  function testsRenderTable() {
    const start = (testsCurrentPage - 1) * testsPageSize;
    const pagedData = testsFilteredData.slice(start, start + testsPageSize);
    const totalPages = Math.ceil(testsFilteredData.length / testsPageSize);

    const tableBody = document.getElementById('testsTableBody');
    tableBody.innerHTML = pagedData.map(item => `
      <tr>
        <td>${item.id || 'N/A'}</td>
        <td>${item.title || 'N/A'}</td>
        <td>${item.description || ''}</td>
        <td>${item.commit_hash || 'N/A'}</td>
        <td>${item.status || 'NA'}</td>
      </tr>
    `).join('');

    document.getElementById('testsPaginationStatus').textContent = `Page ${testsCurrentPage} of ${totalPages} (${testsFilteredData.length} results)`;
    document.getElementById('testsFirstPage').disabled = testsCurrentPage === 1;
    document.getElementById('testsPrevPage').disabled = testsCurrentPage === 1;
    document.getElementById('testsNextPage').disabled = testsCurrentPage === totalPages;
    document.getElementById('testsLastPage').disabled = testsCurrentPage === totalPages;
  }

  // Engagements-Test-Count Tab Initialization
  document.addEventListener('DOMContentLoaded', async () => {
    await fetchCsrfToken();
    await engTestCountFetchData();

    document.getElementById('engTestCountFirstPage').onclick = () => { engTestCountCurrentPage = 1; engTestCountRenderTable(); };
    document.getElementById('engTestCountPrevPage').onclick = () => { if (engTestCountCurrentPage > 1) engTestCountCurrentPage--; engTestCountRenderTable(); };
    document.getElementById('engTestCountNextPage').onclick = () => {
      const totalPages = Math.ceil(engTestCountFilteredData.length / engTestCountPageSize);
      if (engTestCountCurrentPage < totalPages) engTestCountCurrentPage++;
      engTestCountRenderTable();
    };
    document.getElementById('engTestCountLastPage').onclick = () => {
      engTestCountCurrentPage = Math.ceil(engTestCountFilteredData.length / engTestCountPageSize);
      engTestCountRenderTable();
    };
    document.getElementById('engTestCountApplyFilters').onclick = engTestCountApplyFilters;
    document.getElementById('engTestCountResetFilters').onclick = engTestCountResetFilters;

    document.getElementById('testsApplyFilters').onclick = testsApplyFilters;
    document.getElementById('testsResetFilters').onclick = testsResetFilters;
    document.getElementById('testsFirstPage').onclick = () => { testsCurrentPage = 1; testsRenderTable(); };
    document.getElementById('testsPrevPage').onclick = () => { if (testsCurrentPage > 1) testsCurrentPage--; testsRenderTable(); };
    document.getElementById('testsNextPage').onclick = () => {
      const totalPages = Math.ceil(testsFilteredData.length / testsPageSize);
      if (testsCurrentPage < totalPages) testsCurrentPage++;
      testsRenderTable();
    };
    document.getElementById('testsLastPage').onclick = () => {
      testsCurrentPage = Math.ceil(testsFilteredData.length / testsPageSize);
      testsRenderTable();
    };
  });
</script>